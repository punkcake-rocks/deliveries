/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type OrdersApi interface {

	/*
	OrderOrderIdDelete Cancel an order

	Cancel the order with the given ID.<br>
This is an asynchronous call.<br>
Updates will be sent via the status update API and can be requested by the order details API.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orderId The ID of the order
	@return ApiOrderOrderIdDeleteRequest
	*/
	OrderOrderIdDelete(ctx context.Context, orderId string) ApiOrderOrderIdDeleteRequest

	// OrderOrderIdDeleteExecute executes the request
	OrderOrderIdDeleteExecute(r ApiOrderOrderIdDeleteRequest) (*http.Response, error)

	/*
	OrderOrderIdGet Fetch order details

	Get details for the order with the given ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orderId The ID of the order
	@return ApiOrderOrderIdGetRequest
	*/
	OrderOrderIdGet(ctx context.Context, orderId string) ApiOrderOrderIdGetRequest

	// OrderOrderIdGetExecute executes the request
	//  @return OrderDetails
	OrderOrderIdGetExecute(r ApiOrderOrderIdGetRequest) (*OrderDetails, *http.Response, error)

	/*
	OrderOrderIdLabelGet Create a label for an order

	Create a label for an order, return the file's contents

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orderId The ID of the order
	@return ApiOrderOrderIdLabelGetRequest
	*/
	OrderOrderIdLabelGet(ctx context.Context, orderId string) ApiOrderOrderIdLabelGetRequest

	// OrderOrderIdLabelGetExecute executes the request
	//  @return *os.File
	OrderOrderIdLabelGetExecute(r ApiOrderOrderIdLabelGetRequest) (*os.File, *http.Response, error)

	/*
	OrderOrderIdLiveTrackingGet Fetch live order tracking

	Get live order tracking details for the order with the given ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orderId The ID of the order
	@return ApiOrderOrderIdLiveTrackingGetRequest
	*/
	OrderOrderIdLiveTrackingGet(ctx context.Context, orderId string) ApiOrderOrderIdLiveTrackingGetRequest

	// OrderOrderIdLiveTrackingGetExecute executes the request
	//  @return OrderTrackingInfo
	OrderOrderIdLiveTrackingGetExecute(r ApiOrderOrderIdLiveTrackingGetRequest) (*OrderTrackingInfo, *http.Response, error)

	/*
	OrderOrderIdPatch Update order details

	Update details for the order with the given ID. This sets the order to "manually updated".

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orderId The ID of the order
	@return ApiOrderOrderIdPatchRequest
	*/
	OrderOrderIdPatch(ctx context.Context, orderId string) ApiOrderOrderIdPatchRequest

	// OrderOrderIdPatchExecute executes the request
	OrderOrderIdPatchExecute(r ApiOrderOrderIdPatchRequest) (*http.Response, error)

	/*
	OrderPost Order a delivery

	Order a delivery based on a quote.<br>***If there already exists an order with the given proposal ID, that order will be returned (and a new one will NOT be created)***

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOrderPostRequest
	*/
	OrderPost(ctx context.Context) ApiOrderPostRequest

	// OrderPostExecute executes the request
	//  @return OrderDetails
	OrderPostExecute(r ApiOrderPostRequest) (*OrderDetails, *http.Response, error)

	/*
	OrdersGet Get orders

	Get the list of orders for a timeframe

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOrdersGetRequest
	*/
	OrdersGet(ctx context.Context) ApiOrdersGetRequest

	// OrdersGetExecute executes the request
	//  @return []OrderListItem
	OrdersGetExecute(r ApiOrdersGetRequest) ([]OrderListItem, *http.Response, error)
}

// OrdersApiService OrdersApi service
type OrdersApiService service

type ApiOrderOrderIdDeleteRequest struct {
	ctx context.Context
	ApiService OrdersApi
	orderId string
	noConfirmIfNoFee *bool
	xEvermileToken *string
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
}

// Should the order be cancelled immediately if there is no cancellation fee. Default is false.
func (r ApiOrderOrderIdDeleteRequest) NoConfirmIfNoFee(noConfirmIfNoFee bool) ApiOrderOrderIdDeleteRequest {
	r.noConfirmIfNoFee = &noConfirmIfNoFee
	return r
}

// A token to confirm cancellation after receiving 402 code
func (r ApiOrderOrderIdDeleteRequest) XEvermileToken(xEvermileToken string) ApiOrderOrderIdDeleteRequest {
	r.xEvermileToken = &xEvermileToken
	return r
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiOrderOrderIdDeleteRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiOrderOrderIdDeleteRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiOrderOrderIdDeleteRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiOrderOrderIdDeleteRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiOrderOrderIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrderOrderIdDeleteExecute(r)
}

/*
OrderOrderIdDelete Cancel an order

Cancel the order with the given ID.<br>
This is an asynchronous call.<br>
Updates will be sent via the status update API and can be requested by the order details API.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderId The ID of the order
 @return ApiOrderOrderIdDeleteRequest
*/
func (a *OrdersApiService) OrderOrderIdDelete(ctx context.Context, orderId string) ApiOrderOrderIdDeleteRequest {
	return ApiOrderOrderIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orderId: orderId,
	}
}

// Execute executes the request
func (a *OrdersApiService) OrderOrderIdDeleteExecute(r ApiOrderOrderIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersApiService.OrderOrderIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/{orderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orderId"+"}", url.PathEscape(parameterValueToString(r.orderId, "orderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.noConfirmIfNoFee != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "noConfirmIfNoFee", r.noConfirmIfNoFee, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEvermileToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-evermile-token", r.xEvermileToken, "")
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 402 {
			var v OrderOrderIdDelete402Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrderOrderIdGetRequest struct {
	ctx context.Context
	ApiService OrdersApi
	orderId string
	includeTrackingInfo *bool
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
}

// Should include live tracking info with this order. Default is false.
func (r ApiOrderOrderIdGetRequest) IncludeTrackingInfo(includeTrackingInfo bool) ApiOrderOrderIdGetRequest {
	r.includeTrackingInfo = &includeTrackingInfo
	return r
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiOrderOrderIdGetRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiOrderOrderIdGetRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiOrderOrderIdGetRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiOrderOrderIdGetRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiOrderOrderIdGetRequest) Execute() (*OrderDetails, *http.Response, error) {
	return r.ApiService.OrderOrderIdGetExecute(r)
}

/*
OrderOrderIdGet Fetch order details

Get details for the order with the given ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderId The ID of the order
 @return ApiOrderOrderIdGetRequest
*/
func (a *OrdersApiService) OrderOrderIdGet(ctx context.Context, orderId string) ApiOrderOrderIdGetRequest {
	return ApiOrderOrderIdGetRequest{
		ApiService: a,
		ctx: ctx,
		orderId: orderId,
	}
}

// Execute executes the request
//  @return OrderDetails
func (a *OrdersApiService) OrderOrderIdGetExecute(r ApiOrderOrderIdGetRequest) (*OrderDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrderDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersApiService.OrderOrderIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/{orderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orderId"+"}", url.PathEscape(parameterValueToString(r.orderId, "orderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeTrackingInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTrackingInfo", r.includeTrackingInfo, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrderOrderIdLabelGetRequest struct {
	ctx context.Context
	ApiService OrdersApi
	orderId string
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiOrderOrderIdLabelGetRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiOrderOrderIdLabelGetRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiOrderOrderIdLabelGetRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiOrderOrderIdLabelGetRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiOrderOrderIdLabelGetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.OrderOrderIdLabelGetExecute(r)
}

/*
OrderOrderIdLabelGet Create a label for an order

Create a label for an order, return the file's contents

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderId The ID of the order
 @return ApiOrderOrderIdLabelGetRequest
*/
func (a *OrdersApiService) OrderOrderIdLabelGet(ctx context.Context, orderId string) ApiOrderOrderIdLabelGetRequest {
	return ApiOrderOrderIdLabelGetRequest{
		ApiService: a,
		ctx: ctx,
		orderId: orderId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *OrdersApiService) OrderOrderIdLabelGetExecute(r ApiOrderOrderIdLabelGetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersApiService.OrderOrderIdLabelGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/{orderId}/label"
	localVarPath = strings.Replace(localVarPath, "{"+"orderId"+"}", url.PathEscape(parameterValueToString(r.orderId, "orderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/pdf", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrderOrderIdLiveTrackingGetRequest struct {
	ctx context.Context
	ApiService OrdersApi
	orderId string
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiOrderOrderIdLiveTrackingGetRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiOrderOrderIdLiveTrackingGetRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiOrderOrderIdLiveTrackingGetRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiOrderOrderIdLiveTrackingGetRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiOrderOrderIdLiveTrackingGetRequest) Execute() (*OrderTrackingInfo, *http.Response, error) {
	return r.ApiService.OrderOrderIdLiveTrackingGetExecute(r)
}

/*
OrderOrderIdLiveTrackingGet Fetch live order tracking

Get live order tracking details for the order with the given ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderId The ID of the order
 @return ApiOrderOrderIdLiveTrackingGetRequest
*/
func (a *OrdersApiService) OrderOrderIdLiveTrackingGet(ctx context.Context, orderId string) ApiOrderOrderIdLiveTrackingGetRequest {
	return ApiOrderOrderIdLiveTrackingGetRequest{
		ApiService: a,
		ctx: ctx,
		orderId: orderId,
	}
}

// Execute executes the request
//  @return OrderTrackingInfo
func (a *OrdersApiService) OrderOrderIdLiveTrackingGetExecute(r ApiOrderOrderIdLiveTrackingGetRequest) (*OrderTrackingInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrderTrackingInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersApiService.OrderOrderIdLiveTrackingGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/{orderId}/liveTracking"
	localVarPath = strings.Replace(localVarPath, "{"+"orderId"+"}", url.PathEscape(parameterValueToString(r.orderId, "orderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrderOrderIdPatchRequest struct {
	ctx context.Context
	ApiService OrdersApi
	orderId string
	orderOrderIdPatchRequest *OrderOrderIdPatchRequest
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
}

func (r ApiOrderOrderIdPatchRequest) OrderOrderIdPatchRequest(orderOrderIdPatchRequest OrderOrderIdPatchRequest) ApiOrderOrderIdPatchRequest {
	r.orderOrderIdPatchRequest = &orderOrderIdPatchRequest
	return r
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiOrderOrderIdPatchRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiOrderOrderIdPatchRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiOrderOrderIdPatchRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiOrderOrderIdPatchRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiOrderOrderIdPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrderOrderIdPatchExecute(r)
}

/*
OrderOrderIdPatch Update order details

Update details for the order with the given ID. This sets the order to "manually updated".

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderId The ID of the order
 @return ApiOrderOrderIdPatchRequest
*/
func (a *OrdersApiService) OrderOrderIdPatch(ctx context.Context, orderId string) ApiOrderOrderIdPatchRequest {
	return ApiOrderOrderIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		orderId: orderId,
	}
}

// Execute executes the request
func (a *OrdersApiService) OrderOrderIdPatchExecute(r ApiOrderOrderIdPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersApiService.OrderOrderIdPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order/{orderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orderId"+"}", url.PathEscape(parameterValueToString(r.orderId, "orderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderOrderIdPatchRequest == nil {
		return nil, reportError("orderOrderIdPatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	// body params
	localVarPostBody = r.orderOrderIdPatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOrderPostRequest struct {
	ctx context.Context
	ApiService OrdersApi
	orderRequest *OrderRequest
	xEvermileToken *string
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
	xEVERMILESTOREID *string
}

func (r ApiOrderPostRequest) OrderRequest(orderRequest OrderRequest) ApiOrderPostRequest {
	r.orderRequest = &orderRequest
	return r
}

// A token to confirm cancellation after receiving 402 code
func (r ApiOrderPostRequest) XEvermileToken(xEvermileToken string) ApiOrderPostRequest {
	r.xEvermileToken = &xEvermileToken
	return r
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiOrderPostRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiOrderPostRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiOrderPostRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiOrderPostRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

// A store ID for an order&#39;s store platform context
func (r ApiOrderPostRequest) XEVERMILESTOREID(xEVERMILESTOREID string) ApiOrderPostRequest {
	r.xEVERMILESTOREID = &xEVERMILESTOREID
	return r
}

func (r ApiOrderPostRequest) Execute() (*OrderDetails, *http.Response, error) {
	return r.ApiService.OrderPostExecute(r)
}

/*
OrderPost Order a delivery

Order a delivery based on a quote.<br>***If there already exists an order with the given proposal ID, that order will be returned (and a new one will NOT be created)***

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOrderPostRequest
*/
func (a *OrdersApiService) OrderPost(ctx context.Context) ApiOrderPostRequest {
	return ApiOrderPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OrderDetails
func (a *OrdersApiService) OrderPostExecute(r ApiOrderPostRequest) (*OrderDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrderDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersApiService.OrderPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderRequest == nil {
		return localVarReturnValue, nil, reportError("orderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEvermileToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-evermile-token", r.xEvermileToken, "")
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	if r.xEVERMILESTOREID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-STORE-ID", r.xEVERMILESTOREID, "")
	}
	// body params
	localVarPostBody = r.orderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrdersGetRequest struct {
	ctx context.Context
	ApiService OrdersApi
	from *string
	to *string
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
	xEVERMILESTOREID *string
}

// The start date to query (YYYY-MM-DD). Default is today.
func (r ApiOrdersGetRequest) From(from string) ApiOrdersGetRequest {
	r.from = &from
	return r
}

// The end date to query (YYYY-MM-DD). Default is today.
func (r ApiOrdersGetRequest) To(to string) ApiOrdersGetRequest {
	r.to = &to
	return r
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiOrdersGetRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiOrdersGetRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiOrdersGetRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiOrdersGetRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

// A store ID for an order&#39;s store platform context
func (r ApiOrdersGetRequest) XEVERMILESTOREID(xEVERMILESTOREID string) ApiOrdersGetRequest {
	r.xEVERMILESTOREID = &xEVERMILESTOREID
	return r
}

func (r ApiOrdersGetRequest) Execute() ([]OrderListItem, *http.Response, error) {
	return r.ApiService.OrdersGetExecute(r)
}

/*
OrdersGet Get orders

Get the list of orders for a timeframe

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOrdersGetRequest
*/
func (a *OrdersApiService) OrdersGet(ctx context.Context) ApiOrdersGetRequest {
	return ApiOrdersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OrderListItem
func (a *OrdersApiService) OrdersGetExecute(r ApiOrdersGetRequest) ([]OrderListItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OrderListItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersApiService.OrdersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	if r.to != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	if r.xEVERMILESTOREID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-STORE-ID", r.xEVERMILESTOREID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
