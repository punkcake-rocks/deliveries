/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
	"fmt"
)

// LocationTypeEnum the type of location being referred to
type LocationTypeEnum string

// List of locationTypeEnum
const (
	LOCATIONTYPEENUM_PICKUP LocationTypeEnum = "pickup"
	LOCATIONTYPEENUM_INFO LocationTypeEnum = "info"
)

// All allowed values of LocationTypeEnum enum
var AllowedLocationTypeEnumEnumValues = []LocationTypeEnum{
	"pickup",
	"info",
}

func (v *LocationTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocationTypeEnum(value)
	for _, existing := range AllowedLocationTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocationTypeEnum", value)
}

// NewLocationTypeEnumFromValue returns a pointer to a valid LocationTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocationTypeEnumFromValue(v string) (*LocationTypeEnum, error) {
	ev := LocationTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocationTypeEnum: valid values are %v", v, AllowedLocationTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocationTypeEnum) IsValid() bool {
	for _, existing := range AllowedLocationTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to locationTypeEnum value
func (v LocationTypeEnum) Ptr() *LocationTypeEnum {
	return &v
}

type NullableLocationTypeEnum struct {
	value *LocationTypeEnum
	isSet bool
}

func (v NullableLocationTypeEnum) Get() *LocationTypeEnum {
	return v.value
}

func (v *NullableLocationTypeEnum) Set(val *LocationTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationTypeEnum(val *LocationTypeEnum) *NullableLocationTypeEnum {
	return &NullableLocationTypeEnum{value: val, isSet: true}
}

func (v NullableLocationTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

