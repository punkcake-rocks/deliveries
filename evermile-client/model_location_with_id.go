/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
)

// checks if the LocationWithId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationWithId{}

// LocationWithId A location with an ID property
type LocationWithId struct {
	// The location's evermile ID. Used for updating a location (if provided)
	Id string `json:"id"`
	// The customer ID to which this location belongs
	MerchantId string `json:"merchantId"`
	// An informative name for this location
	Name string `json:"name"`
	Address Address `json:"address"`
	// A phone number for this location (relevant when location is used as sender_info)
	Phone *string `json:"phone,omitempty"`
	// An email of the contact person for this location (relevant when location is used as sender_info)
	Email *string `json:"email,omitempty"`
	// Additional notes to describe this location
	Notes *string `json:"notes,omitempty"`
	// True if this is the default location
	IsDefault *bool `json:"isDefault,omitempty"`
	// A store ID associated with this location
	StoreId *string `json:"storeId,omitempty"`
	Schedule *LocationWeeklySchedule `json:"schedule,omitempty"`
}

// NewLocationWithId instantiates a new LocationWithId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationWithId(id string, merchantId string, name string, address Address) *LocationWithId {
	this := LocationWithId{}
	this.Id = id
	this.MerchantId = merchantId
	this.Name = name
	this.Address = address
	return &this
}

// NewLocationWithIdWithDefaults instantiates a new LocationWithId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationWithIdWithDefaults() *LocationWithId {
	this := LocationWithId{}
	return &this
}

// GetId returns the Id field value
func (o *LocationWithId) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LocationWithId) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LocationWithId) SetId(v string) {
	o.Id = v
}

// GetMerchantId returns the MerchantId field value
func (o *LocationWithId) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *LocationWithId) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *LocationWithId) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetName returns the Name field value
func (o *LocationWithId) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LocationWithId) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LocationWithId) SetName(v string) {
	o.Name = v
}

// GetAddress returns the Address field value
func (o *LocationWithId) GetAddress() Address {
	if o == nil {
		var ret Address
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *LocationWithId) GetAddressOk() (*Address, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *LocationWithId) SetAddress(v Address) {
	o.Address = v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *LocationWithId) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationWithId) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *LocationWithId) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *LocationWithId) SetPhone(v string) {
	o.Phone = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *LocationWithId) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationWithId) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *LocationWithId) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *LocationWithId) SetEmail(v string) {
	o.Email = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *LocationWithId) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationWithId) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *LocationWithId) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *LocationWithId) SetNotes(v string) {
	o.Notes = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *LocationWithId) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationWithId) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *LocationWithId) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *LocationWithId) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetStoreId returns the StoreId field value if set, zero value otherwise.
func (o *LocationWithId) GetStoreId() string {
	if o == nil || IsNil(o.StoreId) {
		var ret string
		return ret
	}
	return *o.StoreId
}

// GetStoreIdOk returns a tuple with the StoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationWithId) GetStoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoreId) {
		return nil, false
	}
	return o.StoreId, true
}

// HasStoreId returns a boolean if a field has been set.
func (o *LocationWithId) HasStoreId() bool {
	if o != nil && !IsNil(o.StoreId) {
		return true
	}

	return false
}

// SetStoreId gets a reference to the given string and assigns it to the StoreId field.
func (o *LocationWithId) SetStoreId(v string) {
	o.StoreId = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *LocationWithId) GetSchedule() LocationWeeklySchedule {
	if o == nil || IsNil(o.Schedule) {
		var ret LocationWeeklySchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationWithId) GetScheduleOk() (*LocationWeeklySchedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *LocationWithId) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given LocationWeeklySchedule and assigns it to the Schedule field.
func (o *LocationWithId) SetSchedule(v LocationWeeklySchedule) {
	o.Schedule = &v
}

func (o LocationWithId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationWithId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["merchantId"] = o.MerchantId
	toSerialize["name"] = o.Name
	toSerialize["address"] = o.Address
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	if !IsNil(o.StoreId) {
		toSerialize["storeId"] = o.StoreId
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	return toSerialize, nil
}

type NullableLocationWithId struct {
	value *LocationWithId
	isSet bool
}

func (v NullableLocationWithId) Get() *LocationWithId {
	return v.value
}

func (v *NullableLocationWithId) Set(val *LocationWithId) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationWithId) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationWithId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationWithId(val *LocationWithId) *NullableLocationWithId {
	return &NullableLocationWithId{value: val, isSet: true}
}

func (v NullableLocationWithId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationWithId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


