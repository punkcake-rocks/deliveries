/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
	"fmt"
)

// WebhookTopic <u>The webhook topic</u>: <br> <table>   <tr><td>order.created</td>        <td>A new order was created</td></tr>   <tr><td>order.updated</td>        <td>An order was updated</td></tr>   <tr><td>order.cancelled</td>      <td>An order was cancelled</td></tr>   <tr><td>order.collected</td>      <td>An order was collected from the pickup location</td></tr>   <tr><td>order.delivered</td>      <td>An order was delivered to the end customer</td></tr>   <tr><td>order.failed</td>         <td>An order delivery failed</td></tr>   <tr><td>delivery.liveUpdate</td>  <td>A live update of an ongoing delivery</td></tr> </table> 
type WebhookTopic string

// List of webhookTopic
const (
	WEBHOOKTOPIC_ORDER_CREATED WebhookTopic = "order.created"
	WEBHOOKTOPIC_ORDER_UPDATED WebhookTopic = "order.updated"
	WEBHOOKTOPIC_ORDER_CANCELLED WebhookTopic = "order.cancelled"
	WEBHOOKTOPIC_ORDER_COLLECTED WebhookTopic = "order.collected"
	WEBHOOKTOPIC_ORDER_DELIVERED WebhookTopic = "order.delivered"
	WEBHOOKTOPIC_ORDER_FAILED WebhookTopic = "order.failed"
	WEBHOOKTOPIC_DELIVERY_LIVE_UPDATE WebhookTopic = "delivery.liveUpdate"
)

// All allowed values of WebhookTopic enum
var AllowedWebhookTopicEnumValues = []WebhookTopic{
	"order.created",
	"order.updated",
	"order.cancelled",
	"order.collected",
	"order.delivered",
	"order.failed",
	"delivery.liveUpdate",
}

func (v *WebhookTopic) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebhookTopic(value)
	for _, existing := range AllowedWebhookTopicEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebhookTopic", value)
}

// NewWebhookTopicFromValue returns a pointer to a valid WebhookTopic
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebhookTopicFromValue(v string) (*WebhookTopic, error) {
	ev := WebhookTopic(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebhookTopic: valid values are %v", v, AllowedWebhookTopicEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebhookTopic) IsValid() bool {
	for _, existing := range AllowedWebhookTopicEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to webhookTopic value
func (v WebhookTopic) Ptr() *WebhookTopic {
	return &v
}

type NullableWebhookTopic struct {
	value *WebhookTopic
	isSet bool
}

func (v NullableWebhookTopic) Get() *WebhookTopic {
	return v.value
}

func (v *NullableWebhookTopic) Set(val *WebhookTopic) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookTopic) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookTopic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookTopic(val *WebhookTopic) *NullableWebhookTopic {
	return &NullableWebhookTopic{value: val, isSet: true}
}

func (v NullableWebhookTopic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookTopic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

