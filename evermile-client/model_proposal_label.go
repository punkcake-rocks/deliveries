/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
	"fmt"
)

// ProposalLabel the model 'ProposalLabel'
type ProposalLabel string

// List of proposalLabel
const (
	PROPOSALLABEL_MORNING ProposalLabel = "morning"
	PROPOSALLABEL_NOON ProposalLabel = "noon"
	PROPOSALLABEL_AFTERNOON ProposalLabel = "afternoon"
	PROPOSALLABEL_EVENING ProposalLabel = "evening"
	PROPOSALLABEL_ALL_DAY ProposalLabel = "allDay"
	PROPOSALLABEL_EXPRESS ProposalLabel = "express"
)

// All allowed values of ProposalLabel enum
var AllowedProposalLabelEnumValues = []ProposalLabel{
	"morning",
	"noon",
	"afternoon",
	"evening",
	"allDay",
	"express",
}

func (v *ProposalLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProposalLabel(value)
	for _, existing := range AllowedProposalLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProposalLabel", value)
}

// NewProposalLabelFromValue returns a pointer to a valid ProposalLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProposalLabelFromValue(v string) (*ProposalLabel, error) {
	ev := ProposalLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProposalLabel: valid values are %v", v, AllowedProposalLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProposalLabel) IsValid() bool {
	for _, existing := range AllowedProposalLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to proposalLabel value
func (v ProposalLabel) Ptr() *ProposalLabel {
	return &v
}

type NullableProposalLabel struct {
	value *ProposalLabel
	isSet bool
}

func (v NullableProposalLabel) Get() *ProposalLabel {
	return v.value
}

func (v *NullableProposalLabel) Set(val *ProposalLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableProposalLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableProposalLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProposalLabel(val *ProposalLabel) *NullableProposalLabel {
	return &NullableProposalLabel{value: val, isSet: true}
}

func (v NullableProposalLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProposalLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

