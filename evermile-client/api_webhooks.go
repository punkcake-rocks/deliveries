/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type WebhooksApi interface {

	/*
	WebhookGet List all webhooks

	Get the list of all registered webhooks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiWebhookGetRequest
	*/
	WebhookGet(ctx context.Context) ApiWebhookGetRequest

	// WebhookGetExecute executes the request
	//  @return WebhookGetResponse
	WebhookGetExecute(r ApiWebhookGetRequest) (*WebhookGetResponse, *http.Response, error)

	/*
	WebhookPost Register webhook

	Register a webhook

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiWebhookPostRequest
	*/
	WebhookPost(ctx context.Context) ApiWebhookPostRequest

	// WebhookPostExecute executes the request
	//  @return WebhookPostResponse
	WebhookPostExecute(r ApiWebhookPostRequest) (*WebhookPostResponse, *http.Response, error)

	/*
	WebhookWebhookIdDelete Delete a webhook

	Delete a previously registered webhook

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param webhookId The ID of the webhook
	@return ApiWebhookWebhookIdDeleteRequest
	*/
	WebhookWebhookIdDelete(ctx context.Context, webhookId string) ApiWebhookWebhookIdDeleteRequest

	// WebhookWebhookIdDeleteExecute executes the request
	WebhookWebhookIdDeleteExecute(r ApiWebhookWebhookIdDeleteRequest) (*http.Response, error)

	/*
	WebhookWebhookIdGet Get webhook details

	Get the details of a previously registered webhook

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param webhookId The ID of the webhook
	@return ApiWebhookWebhookIdGetRequest
	*/
	WebhookWebhookIdGet(ctx context.Context, webhookId string) ApiWebhookWebhookIdGetRequest

	// WebhookWebhookIdGetExecute executes the request
	//  @return Webhook
	WebhookWebhookIdGetExecute(r ApiWebhookWebhookIdGetRequest) (*Webhook, *http.Response, error)
}

// WebhooksApiService WebhooksApi service
type WebhooksApiService service

type ApiWebhookGetRequest struct {
	ctx context.Context
	ApiService WebhooksApi
	xEVERMILEAUTHHEADER *string
	xEVERMILEWEBHOOKTOPIC *WebhookTopic
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
}

// The auth header specified in the URL registration request (the actual header name is up to the user)
func (r ApiWebhookGetRequest) XEVERMILEAUTHHEADER(xEVERMILEAUTHHEADER string) ApiWebhookGetRequest {
	r.xEVERMILEAUTHHEADER = &xEVERMILEAUTHHEADER
	return r
}

// The webhook topic this callback is referring to
func (r ApiWebhookGetRequest) XEVERMILEWEBHOOKTOPIC(xEVERMILEWEBHOOKTOPIC WebhookTopic) ApiWebhookGetRequest {
	r.xEVERMILEWEBHOOKTOPIC = &xEVERMILEWEBHOOKTOPIC
	return r
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiWebhookGetRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiWebhookGetRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiWebhookGetRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiWebhookGetRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiWebhookGetRequest) Execute() (*WebhookGetResponse, *http.Response, error) {
	return r.ApiService.WebhookGetExecute(r)
}

/*
WebhookGet List all webhooks

Get the list of all registered webhooks

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWebhookGetRequest
*/
func (a *WebhooksApiService) WebhookGet(ctx context.Context) ApiWebhookGetRequest {
	return ApiWebhookGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WebhookGetResponse
func (a *WebhooksApiService) WebhookGetExecute(r ApiWebhookGetRequest) (*WebhookGetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WebhookGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebhooksApiService.WebhookGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/webhook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xEVERMILEAUTHHEADER == nil {
		return localVarReturnValue, nil, reportError("xEVERMILEAUTHHEADER is required and must be specified")
	}
	if r.xEVERMILEWEBHOOKTOPIC == nil {
		return localVarReturnValue, nil, reportError("xEVERMILEWEBHOOKTOPIC is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-AUTH-HEADER", r.xEVERMILEAUTHHEADER, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-WEBHOOK-TOPIC", r.xEVERMILEWEBHOOKTOPIC, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWebhookPostRequest struct {
	ctx context.Context
	ApiService WebhooksApi
	xEVERMILEAUTHHEADER *string
	xEVERMILEWEBHOOKTOPIC *WebhookTopic
	webhookRequest *WebhookRequest
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
}

// The auth header specified in the URL registration request (the actual header name is up to the user)
func (r ApiWebhookPostRequest) XEVERMILEAUTHHEADER(xEVERMILEAUTHHEADER string) ApiWebhookPostRequest {
	r.xEVERMILEAUTHHEADER = &xEVERMILEAUTHHEADER
	return r
}

// The webhook topic this callback is referring to
func (r ApiWebhookPostRequest) XEVERMILEWEBHOOKTOPIC(xEVERMILEWEBHOOKTOPIC WebhookTopic) ApiWebhookPostRequest {
	r.xEVERMILEWEBHOOKTOPIC = &xEVERMILEWEBHOOKTOPIC
	return r
}

func (r ApiWebhookPostRequest) WebhookRequest(webhookRequest WebhookRequest) ApiWebhookPostRequest {
	r.webhookRequest = &webhookRequest
	return r
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiWebhookPostRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiWebhookPostRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiWebhookPostRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiWebhookPostRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiWebhookPostRequest) Execute() (*WebhookPostResponse, *http.Response, error) {
	return r.ApiService.WebhookPostExecute(r)
}

/*
WebhookPost Register webhook

Register a webhook

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWebhookPostRequest
*/
func (a *WebhooksApiService) WebhookPost(ctx context.Context) ApiWebhookPostRequest {
	return ApiWebhookPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WebhookPostResponse
func (a *WebhooksApiService) WebhookPostExecute(r ApiWebhookPostRequest) (*WebhookPostResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WebhookPostResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebhooksApiService.WebhookPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/webhook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xEVERMILEAUTHHEADER == nil {
		return localVarReturnValue, nil, reportError("xEVERMILEAUTHHEADER is required and must be specified")
	}
	if r.xEVERMILEWEBHOOKTOPIC == nil {
		return localVarReturnValue, nil, reportError("xEVERMILEWEBHOOKTOPIC is required and must be specified")
	}
	if r.webhookRequest == nil {
		return localVarReturnValue, nil, reportError("webhookRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-AUTH-HEADER", r.xEVERMILEAUTHHEADER, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-WEBHOOK-TOPIC", r.xEVERMILEWEBHOOKTOPIC, "")
	// body params
	localVarPostBody = r.webhookRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWebhookWebhookIdDeleteRequest struct {
	ctx context.Context
	ApiService WebhooksApi
	webhookId string
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiWebhookWebhookIdDeleteRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiWebhookWebhookIdDeleteRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiWebhookWebhookIdDeleteRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiWebhookWebhookIdDeleteRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiWebhookWebhookIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.WebhookWebhookIdDeleteExecute(r)
}

/*
WebhookWebhookIdDelete Delete a webhook

Delete a previously registered webhook

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param webhookId The ID of the webhook
 @return ApiWebhookWebhookIdDeleteRequest
*/
func (a *WebhooksApiService) WebhookWebhookIdDelete(ctx context.Context, webhookId string) ApiWebhookWebhookIdDeleteRequest {
	return ApiWebhookWebhookIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		webhookId: webhookId,
	}
}

// Execute executes the request
func (a *WebhooksApiService) WebhookWebhookIdDeleteExecute(r ApiWebhookWebhookIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebhooksApiService.WebhookWebhookIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/webhook/{webhookId}"
	localVarPath = strings.Replace(localVarPath, "{"+"webhookId"+"}", url.PathEscape(parameterValueToString(r.webhookId, "webhookId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWebhookWebhookIdGetRequest struct {
	ctx context.Context
	ApiService WebhooksApi
	webhookId string
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiWebhookWebhookIdGetRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiWebhookWebhookIdGetRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiWebhookWebhookIdGetRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiWebhookWebhookIdGetRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiWebhookWebhookIdGetRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.WebhookWebhookIdGetExecute(r)
}

/*
WebhookWebhookIdGet Get webhook details

Get the details of a previously registered webhook

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param webhookId The ID of the webhook
 @return ApiWebhookWebhookIdGetRequest
*/
func (a *WebhooksApiService) WebhookWebhookIdGet(ctx context.Context, webhookId string) ApiWebhookWebhookIdGetRequest {
	return ApiWebhookWebhookIdGetRequest{
		ApiService: a,
		ctx: ctx,
		webhookId: webhookId,
	}
}

// Execute executes the request
//  @return Webhook
func (a *WebhooksApiService) WebhookWebhookIdGetExecute(r ApiWebhookWebhookIdGetRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebhooksApiService.WebhookWebhookIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/webhook/{webhookId}"
	localVarPath = strings.Replace(localVarPath, "{"+"webhookId"+"}", url.PathEscape(parameterValueToString(r.webhookId, "webhookId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
