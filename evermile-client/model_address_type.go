/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
	"fmt"
)

// AddressType <u>The type of address</u>: <br> <table>   <tr><td>office</td>       <td>An office building</td></tr>   <tr><td>pudo</td>         <td>A Pickup/Dropoff depot</td></tr>   <tr><td>residential</td>  <td>A residential building</td></tr>   <tr><td>store</td>        <td>A store</td></tr>   <tr><td>warehouse</td>    <td>A warehouse / micro-fulfillment center</td></tr> </table> 
type AddressType string

// List of addressType
const (
	ADDRESSTYPE_OFFICE AddressType = "office"
	ADDRESSTYPE_PUDO AddressType = "pudo"
	ADDRESSTYPE_RESIDENTIAL_BUILDING AddressType = "residential_building"
	ADDRESSTYPE_RESIDENTIAL_PRIVATE AddressType = "residential_private"
	ADDRESSTYPE_STORE AddressType = "store"
	ADDRESSTYPE_WAREHOUSE AddressType = "warehouse"
)

// All allowed values of AddressType enum
var AllowedAddressTypeEnumValues = []AddressType{
	"office",
	"pudo",
	"residential_building",
	"residential_private",
	"store",
	"warehouse",
}

func (v *AddressType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddressType(value)
	for _, existing := range AllowedAddressTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddressType", value)
}

// NewAddressTypeFromValue returns a pointer to a valid AddressType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddressTypeFromValue(v string) (*AddressType, error) {
	ev := AddressType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddressType: valid values are %v", v, AllowedAddressTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddressType) IsValid() bool {
	for _, existing := range AllowedAddressTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to addressType value
func (v AddressType) Ptr() *AddressType {
	return &v
}

type NullableAddressType struct {
	value *AddressType
	isSet bool
}

func (v NullableAddressType) Get() *AddressType {
	return v.value
}

func (v *NullableAddressType) Set(val *AddressType) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressType) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressType(val *AddressType) *NullableAddressType {
	return &NullableAddressType{value: val, isSet: true}
}

func (v NullableAddressType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

