/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
	"time"
)

// checks if the OrderFailedCallbackResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderFailedCallbackResp{}

// OrderFailedCallbackResp struct for OrderFailedCallbackResp
type OrderFailedCallbackResp struct {
	// The time this callback was sent in ISO8601 format
	Timestamp time.Time `json:"timestamp"`
	// The ID of the order
	OrderId string `json:"orderId"`
	// An optional string detailing the failure reason
	FailureReason *string `json:"failureReason,omitempty"`
}

// NewOrderFailedCallbackResp instantiates a new OrderFailedCallbackResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderFailedCallbackResp(timestamp time.Time, orderId string) *OrderFailedCallbackResp {
	this := OrderFailedCallbackResp{}
	this.Timestamp = timestamp
	this.OrderId = orderId
	return &this
}

// NewOrderFailedCallbackRespWithDefaults instantiates a new OrderFailedCallbackResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderFailedCallbackRespWithDefaults() *OrderFailedCallbackResp {
	this := OrderFailedCallbackResp{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *OrderFailedCallbackResp) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *OrderFailedCallbackResp) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *OrderFailedCallbackResp) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetOrderId returns the OrderId field value
func (o *OrderFailedCallbackResp) GetOrderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *OrderFailedCallbackResp) GetOrderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *OrderFailedCallbackResp) SetOrderId(v string) {
	o.OrderId = v
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise.
func (o *OrderFailedCallbackResp) GetFailureReason() string {
	if o == nil || IsNil(o.FailureReason) {
		var ret string
		return ret
	}
	return *o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderFailedCallbackResp) GetFailureReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailureReason) {
		return nil, false
	}
	return o.FailureReason, true
}

// HasFailureReason returns a boolean if a field has been set.
func (o *OrderFailedCallbackResp) HasFailureReason() bool {
	if o != nil && !IsNil(o.FailureReason) {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given string and assigns it to the FailureReason field.
func (o *OrderFailedCallbackResp) SetFailureReason(v string) {
	o.FailureReason = &v
}

func (o OrderFailedCallbackResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderFailedCallbackResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["orderId"] = o.OrderId
	if !IsNil(o.FailureReason) {
		toSerialize["failureReason"] = o.FailureReason
	}
	return toSerialize, nil
}

type NullableOrderFailedCallbackResp struct {
	value *OrderFailedCallbackResp
	isSet bool
}

func (v NullableOrderFailedCallbackResp) Get() *OrderFailedCallbackResp {
	return v.value
}

func (v *NullableOrderFailedCallbackResp) Set(val *OrderFailedCallbackResp) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderFailedCallbackResp) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderFailedCallbackResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderFailedCallbackResp(val *OrderFailedCallbackResp) *NullableOrderFailedCallbackResp {
	return &NullableOrderFailedCallbackResp{value: val, isSet: true}
}

func (v NullableOrderFailedCallbackResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderFailedCallbackResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


