/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type QuotesApi interface {

	/*
	ProposalProposalIdGet Retrieve a proposal

	Retrieve a proposal that was previously returned for a quote by its proposal ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param proposalId The ID of the proposal
	@return ApiProposalProposalIdGetRequest
	*/
	ProposalProposalIdGet(ctx context.Context, proposalId string) ApiProposalProposalIdGetRequest

	// ProposalProposalIdGetExecute executes the request
	//  @return ProposalResponse
	ProposalProposalIdGetExecute(r ApiProposalProposalIdGetRequest) (*ProposalResponse, *http.Response, error)

	/*
	QuotePost Get a quote

	Get proposals for a quote on a delivery order

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiQuotePostRequest
	*/
	QuotePost(ctx context.Context) ApiQuotePostRequest

	// QuotePostExecute executes the request
	//  @return QuoteResponse
	QuotePostExecute(r ApiQuotePostRequest) (*QuoteResponse, *http.Response, error)
}

// QuotesApiService QuotesApi service
type QuotesApiService service

type ApiProposalProposalIdGetRequest struct {
	ctx context.Context
	ApiService QuotesApi
	proposalId string
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiProposalProposalIdGetRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiProposalProposalIdGetRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiProposalProposalIdGetRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiProposalProposalIdGetRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiProposalProposalIdGetRequest) Execute() (*ProposalResponse, *http.Response, error) {
	return r.ApiService.ProposalProposalIdGetExecute(r)
}

/*
ProposalProposalIdGet Retrieve a proposal

Retrieve a proposal that was previously returned for a quote by its proposal ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param proposalId The ID of the proposal
 @return ApiProposalProposalIdGetRequest
*/
func (a *QuotesApiService) ProposalProposalIdGet(ctx context.Context, proposalId string) ApiProposalProposalIdGetRequest {
	return ApiProposalProposalIdGetRequest{
		ApiService: a,
		ctx: ctx,
		proposalId: proposalId,
	}
}

// Execute executes the request
//  @return ProposalResponse
func (a *QuotesApiService) ProposalProposalIdGetExecute(r ApiProposalProposalIdGetRequest) (*ProposalResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProposalResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuotesApiService.ProposalProposalIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/proposal/{proposalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"proposalId"+"}", url.PathEscape(parameterValueToString(r.proposalId, "proposalId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQuotePostRequest struct {
	ctx context.Context
	ApiService QuotesApi
	quoteReq *QuoteReq
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
	xEVERMILESTOREID *string
}

func (r ApiQuotePostRequest) QuoteReq(quoteReq QuoteReq) ApiQuotePostRequest {
	r.quoteReq = &quoteReq
	return r
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiQuotePostRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiQuotePostRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiQuotePostRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiQuotePostRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

// A store ID for an order&#39;s store platform context
func (r ApiQuotePostRequest) XEVERMILESTOREID(xEVERMILESTOREID string) ApiQuotePostRequest {
	r.xEVERMILESTOREID = &xEVERMILESTOREID
	return r
}

func (r ApiQuotePostRequest) Execute() (*QuoteResponse, *http.Response, error) {
	return r.ApiService.QuotePostExecute(r)
}

/*
QuotePost Get a quote

Get proposals for a quote on a delivery order

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQuotePostRequest
*/
func (a *QuotesApiService) QuotePost(ctx context.Context) ApiQuotePostRequest {
	return ApiQuotePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QuoteResponse
func (a *QuotesApiService) QuotePostExecute(r ApiQuotePostRequest) (*QuoteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QuoteResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuotesApiService.QuotePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.quoteReq == nil {
		return localVarReturnValue, nil, reportError("quoteReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	if r.xEVERMILESTOREID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-STORE-ID", r.xEVERMILESTOREID, "")
	}
	// body params
	localVarPostBody = r.quoteReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
