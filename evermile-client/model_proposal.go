/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
)

// checks if the Proposal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Proposal{}

// Proposal The data for a single proposal (response for a quote request)
type Proposal struct {
	// The proposal ID
	Id string `json:"id"`
	Price Price `json:"price"`
	PriceVat *Price `json:"priceVat,omitempty"`
	// The amount of credits this proposal awards, in credit cents
	CreditBack *int64 `json:"creditBack,omitempty"`
	EstimatedPickup DeliverySlot `json:"estimatedPickup"`
	EstimatedDropoff DeliverySlot `json:"estimatedDropoff"`
	DropoffWindowType DropoffWindowTypeEnum `json:"dropoffWindowType"`
	Origin Address `json:"origin"`
	// The id of an existing sender location with the sender contact details (optional)
	PickupLocationId *string `json:"pickupLocationId,omitempty"`
	Destination Address `json:"destination"`
	// The company that will perform the delivery (if known)
	DeliveryCompany *string `json:"deliveryCompany,omitempty"`
	// An array of labels for this proposal
	Labels []ProposalLabelEnum `json:"labels"`
	PriceLevel *int32 `json:"priceLevel,omitempty"`
	HandoffInfo *HandoffInfo `json:"handoffInfo,omitempty"`
	Type *ProposalType `json:"type,omitempty"`
}

// NewProposal instantiates a new Proposal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProposal(id string, price Price, estimatedPickup DeliverySlot, estimatedDropoff DeliverySlot, dropoffWindowType DropoffWindowTypeEnum, origin Address, destination Address, labels []ProposalLabelEnum) *Proposal {
	this := Proposal{}
	this.Id = id
	this.Price = price
	this.EstimatedPickup = estimatedPickup
	this.EstimatedDropoff = estimatedDropoff
	this.DropoffWindowType = dropoffWindowType
	this.Origin = origin
	this.Destination = destination
	this.Labels = labels
	return &this
}

// NewProposalWithDefaults instantiates a new Proposal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProposalWithDefaults() *Proposal {
	this := Proposal{}
	return &this
}

// GetId returns the Id field value
func (o *Proposal) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Proposal) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Proposal) SetId(v string) {
	o.Id = v
}

// GetPrice returns the Price field value
func (o *Proposal) GetPrice() Price {
	if o == nil {
		var ret Price
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Proposal) GetPriceOk() (*Price, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Proposal) SetPrice(v Price) {
	o.Price = v
}

// GetPriceVat returns the PriceVat field value if set, zero value otherwise.
func (o *Proposal) GetPriceVat() Price {
	if o == nil || IsNil(o.PriceVat) {
		var ret Price
		return ret
	}
	return *o.PriceVat
}

// GetPriceVatOk returns a tuple with the PriceVat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Proposal) GetPriceVatOk() (*Price, bool) {
	if o == nil || IsNil(o.PriceVat) {
		return nil, false
	}
	return o.PriceVat, true
}

// HasPriceVat returns a boolean if a field has been set.
func (o *Proposal) HasPriceVat() bool {
	if o != nil && !IsNil(o.PriceVat) {
		return true
	}

	return false
}

// SetPriceVat gets a reference to the given Price and assigns it to the PriceVat field.
func (o *Proposal) SetPriceVat(v Price) {
	o.PriceVat = &v
}

// GetCreditBack returns the CreditBack field value if set, zero value otherwise.
func (o *Proposal) GetCreditBack() int64 {
	if o == nil || IsNil(o.CreditBack) {
		var ret int64
		return ret
	}
	return *o.CreditBack
}

// GetCreditBackOk returns a tuple with the CreditBack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Proposal) GetCreditBackOk() (*int64, bool) {
	if o == nil || IsNil(o.CreditBack) {
		return nil, false
	}
	return o.CreditBack, true
}

// HasCreditBack returns a boolean if a field has been set.
func (o *Proposal) HasCreditBack() bool {
	if o != nil && !IsNil(o.CreditBack) {
		return true
	}

	return false
}

// SetCreditBack gets a reference to the given int64 and assigns it to the CreditBack field.
func (o *Proposal) SetCreditBack(v int64) {
	o.CreditBack = &v
}

// GetEstimatedPickup returns the EstimatedPickup field value
func (o *Proposal) GetEstimatedPickup() DeliverySlot {
	if o == nil {
		var ret DeliverySlot
		return ret
	}

	return o.EstimatedPickup
}

// GetEstimatedPickupOk returns a tuple with the EstimatedPickup field value
// and a boolean to check if the value has been set.
func (o *Proposal) GetEstimatedPickupOk() (*DeliverySlot, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EstimatedPickup, true
}

// SetEstimatedPickup sets field value
func (o *Proposal) SetEstimatedPickup(v DeliverySlot) {
	o.EstimatedPickup = v
}

// GetEstimatedDropoff returns the EstimatedDropoff field value
func (o *Proposal) GetEstimatedDropoff() DeliverySlot {
	if o == nil {
		var ret DeliverySlot
		return ret
	}

	return o.EstimatedDropoff
}

// GetEstimatedDropoffOk returns a tuple with the EstimatedDropoff field value
// and a boolean to check if the value has been set.
func (o *Proposal) GetEstimatedDropoffOk() (*DeliverySlot, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EstimatedDropoff, true
}

// SetEstimatedDropoff sets field value
func (o *Proposal) SetEstimatedDropoff(v DeliverySlot) {
	o.EstimatedDropoff = v
}

// GetDropoffWindowType returns the DropoffWindowType field value
func (o *Proposal) GetDropoffWindowType() DropoffWindowTypeEnum {
	if o == nil {
		var ret DropoffWindowTypeEnum
		return ret
	}

	return o.DropoffWindowType
}

// GetDropoffWindowTypeOk returns a tuple with the DropoffWindowType field value
// and a boolean to check if the value has been set.
func (o *Proposal) GetDropoffWindowTypeOk() (*DropoffWindowTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DropoffWindowType, true
}

// SetDropoffWindowType sets field value
func (o *Proposal) SetDropoffWindowType(v DropoffWindowTypeEnum) {
	o.DropoffWindowType = v
}

// GetOrigin returns the Origin field value
func (o *Proposal) GetOrigin() Address {
	if o == nil {
		var ret Address
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *Proposal) GetOriginOk() (*Address, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *Proposal) SetOrigin(v Address) {
	o.Origin = v
}

// GetPickupLocationId returns the PickupLocationId field value if set, zero value otherwise.
func (o *Proposal) GetPickupLocationId() string {
	if o == nil || IsNil(o.PickupLocationId) {
		var ret string
		return ret
	}
	return *o.PickupLocationId
}

// GetPickupLocationIdOk returns a tuple with the PickupLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Proposal) GetPickupLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.PickupLocationId) {
		return nil, false
	}
	return o.PickupLocationId, true
}

// HasPickupLocationId returns a boolean if a field has been set.
func (o *Proposal) HasPickupLocationId() bool {
	if o != nil && !IsNil(o.PickupLocationId) {
		return true
	}

	return false
}

// SetPickupLocationId gets a reference to the given string and assigns it to the PickupLocationId field.
func (o *Proposal) SetPickupLocationId(v string) {
	o.PickupLocationId = &v
}

// GetDestination returns the Destination field value
func (o *Proposal) GetDestination() Address {
	if o == nil {
		var ret Address
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *Proposal) GetDestinationOk() (*Address, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *Proposal) SetDestination(v Address) {
	o.Destination = v
}

// GetDeliveryCompany returns the DeliveryCompany field value if set, zero value otherwise.
func (o *Proposal) GetDeliveryCompany() string {
	if o == nil || IsNil(o.DeliveryCompany) {
		var ret string
		return ret
	}
	return *o.DeliveryCompany
}

// GetDeliveryCompanyOk returns a tuple with the DeliveryCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Proposal) GetDeliveryCompanyOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryCompany) {
		return nil, false
	}
	return o.DeliveryCompany, true
}

// HasDeliveryCompany returns a boolean if a field has been set.
func (o *Proposal) HasDeliveryCompany() bool {
	if o != nil && !IsNil(o.DeliveryCompany) {
		return true
	}

	return false
}

// SetDeliveryCompany gets a reference to the given string and assigns it to the DeliveryCompany field.
func (o *Proposal) SetDeliveryCompany(v string) {
	o.DeliveryCompany = &v
}

// GetLabels returns the Labels field value
func (o *Proposal) GetLabels() []ProposalLabelEnum {
	if o == nil {
		var ret []ProposalLabelEnum
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *Proposal) GetLabelsOk() ([]ProposalLabelEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *Proposal) SetLabels(v []ProposalLabelEnum) {
	o.Labels = v
}

// GetPriceLevel returns the PriceLevel field value if set, zero value otherwise.
func (o *Proposal) GetPriceLevel() int32 {
	if o == nil || IsNil(o.PriceLevel) {
		var ret int32
		return ret
	}
	return *o.PriceLevel
}

// GetPriceLevelOk returns a tuple with the PriceLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Proposal) GetPriceLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.PriceLevel) {
		return nil, false
	}
	return o.PriceLevel, true
}

// HasPriceLevel returns a boolean if a field has been set.
func (o *Proposal) HasPriceLevel() bool {
	if o != nil && !IsNil(o.PriceLevel) {
		return true
	}

	return false
}

// SetPriceLevel gets a reference to the given int32 and assigns it to the PriceLevel field.
func (o *Proposal) SetPriceLevel(v int32) {
	o.PriceLevel = &v
}

// GetHandoffInfo returns the HandoffInfo field value if set, zero value otherwise.
func (o *Proposal) GetHandoffInfo() HandoffInfo {
	if o == nil || IsNil(o.HandoffInfo) {
		var ret HandoffInfo
		return ret
	}
	return *o.HandoffInfo
}

// GetHandoffInfoOk returns a tuple with the HandoffInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Proposal) GetHandoffInfoOk() (*HandoffInfo, bool) {
	if o == nil || IsNil(o.HandoffInfo) {
		return nil, false
	}
	return o.HandoffInfo, true
}

// HasHandoffInfo returns a boolean if a field has been set.
func (o *Proposal) HasHandoffInfo() bool {
	if o != nil && !IsNil(o.HandoffInfo) {
		return true
	}

	return false
}

// SetHandoffInfo gets a reference to the given HandoffInfo and assigns it to the HandoffInfo field.
func (o *Proposal) SetHandoffInfo(v HandoffInfo) {
	o.HandoffInfo = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Proposal) GetType() ProposalType {
	if o == nil || IsNil(o.Type) {
		var ret ProposalType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Proposal) GetTypeOk() (*ProposalType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Proposal) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ProposalType and assigns it to the Type field.
func (o *Proposal) SetType(v ProposalType) {
	o.Type = &v
}

func (o Proposal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Proposal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["price"] = o.Price
	if !IsNil(o.PriceVat) {
		toSerialize["priceVat"] = o.PriceVat
	}
	if !IsNil(o.CreditBack) {
		toSerialize["creditBack"] = o.CreditBack
	}
	toSerialize["estimatedPickup"] = o.EstimatedPickup
	toSerialize["estimatedDropoff"] = o.EstimatedDropoff
	toSerialize["dropoffWindowType"] = o.DropoffWindowType
	toSerialize["origin"] = o.Origin
	if !IsNil(o.PickupLocationId) {
		toSerialize["pickupLocationId"] = o.PickupLocationId
	}
	toSerialize["destination"] = o.Destination
	if !IsNil(o.DeliveryCompany) {
		toSerialize["deliveryCompany"] = o.DeliveryCompany
	}
	toSerialize["labels"] = o.Labels
	if !IsNil(o.PriceLevel) {
		toSerialize["priceLevel"] = o.PriceLevel
	}
	if !IsNil(o.HandoffInfo) {
		toSerialize["handoffInfo"] = o.HandoffInfo
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableProposal struct {
	value *Proposal
	isSet bool
}

func (v NullableProposal) Get() *Proposal {
	return v.value
}

func (v *NullableProposal) Set(val *Proposal) {
	v.value = val
	v.isSet = true
}

func (v NullableProposal) IsSet() bool {
	return v.isSet
}

func (v *NullableProposal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProposal(val *Proposal) *NullableProposal {
	return &NullableProposal{value: val, isSet: true}
}

func (v NullableProposal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProposal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


