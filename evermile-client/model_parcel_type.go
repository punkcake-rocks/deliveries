/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
	"fmt"
)

// ParcelType <u>The type of address</u>: <br> <table>   <tr><td>Package</td>          <td>A packed box</td></tr>   <tr><td>FlowerBouquet</td>    <td>A flower bouquet</td></tr> </table> 
type ParcelType string

// List of parcelType
const (
	PARCELTYPE_PACKAGE ParcelType = "Package"
	PARCELTYPE_FLOWER_BOUQUET ParcelType = "FlowerBouquet"
)

// All allowed values of ParcelType enum
var AllowedParcelTypeEnumValues = []ParcelType{
	"Package",
	"FlowerBouquet",
}

func (v *ParcelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ParcelType(value)
	for _, existing := range AllowedParcelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParcelType", value)
}

// NewParcelTypeFromValue returns a pointer to a valid ParcelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParcelTypeFromValue(v string) (*ParcelType, error) {
	ev := ParcelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParcelType: valid values are %v", v, AllowedParcelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParcelType) IsValid() bool {
	for _, existing := range AllowedParcelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to parcelType value
func (v ParcelType) Ptr() *ParcelType {
	return &v
}

type NullableParcelType struct {
	value *ParcelType
	isSet bool
}

func (v NullableParcelType) Get() *ParcelType {
	return v.value
}

func (v *NullableParcelType) Set(val *ParcelType) {
	v.value = val
	v.isSet = true
}

func (v NullableParcelType) IsSet() bool {
	return v.isSet
}

func (v *NullableParcelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParcelType(val *ParcelType) *NullableParcelType {
	return &NullableParcelType{value: val, isSet: true}
}

func (v NullableParcelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParcelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

