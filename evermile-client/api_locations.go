/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type LocationsApi interface {

	/*
	SenderInfoIdDelete Delete a delivery location

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The sender info ID
	@return ApiSenderInfoIdDeleteRequest
	*/
	SenderInfoIdDelete(ctx context.Context, id string) ApiSenderInfoIdDeleteRequest

	// SenderInfoIdDeleteExecute executes the request
	SenderInfoIdDeleteExecute(r ApiSenderInfoIdDeleteRequest) (*http.Response, error)

	/*
	SenderInfoPut Create or update a delivery location

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSenderInfoPutRequest
	*/
	SenderInfoPut(ctx context.Context) ApiSenderInfoPutRequest

	// SenderInfoPutExecute executes the request
	//  @return LocationResp
	SenderInfoPutExecute(r ApiSenderInfoPutRequest) (*LocationResp, *http.Response, error)

	/*
	SenderInfosGet Get sender and location infos

	Get all sender infos or delivery origin locations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSenderInfosGetRequest
	*/
	SenderInfosGet(ctx context.Context) ApiSenderInfosGetRequest

	// SenderInfosGetExecute executes the request
	//  @return LocationsResponse
	SenderInfosGetExecute(r ApiSenderInfosGetRequest) (*LocationsResponse, *http.Response, error)
}

// LocationsApiService LocationsApi service
type LocationsApiService service

type ApiSenderInfoIdDeleteRequest struct {
	ctx context.Context
	ApiService LocationsApi
	id string
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiSenderInfoIdDeleteRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiSenderInfoIdDeleteRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiSenderInfoIdDeleteRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiSenderInfoIdDeleteRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiSenderInfoIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SenderInfoIdDeleteExecute(r)
}

/*
SenderInfoIdDelete Delete a delivery location

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The sender info ID
 @return ApiSenderInfoIdDeleteRequest
*/
func (a *LocationsApiService) SenderInfoIdDelete(ctx context.Context, id string) ApiSenderInfoIdDeleteRequest {
	return ApiSenderInfoIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *LocationsApiService) SenderInfoIdDeleteExecute(r ApiSenderInfoIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocationsApiService.SenderInfoIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sender_info/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSenderInfoPutRequest struct {
	ctx context.Context
	ApiService LocationsApi
	type_ *LocationTypeEnum
	body *Location1
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
	xEVERMILESTOREID *string
}

// Whether this action refers to pickup or sender info (pickup/info)
func (r ApiSenderInfoPutRequest) Type_(type_ LocationTypeEnum) ApiSenderInfoPutRequest {
	r.type_ = &type_
	return r
}

func (r ApiSenderInfoPutRequest) Body(body Location1) ApiSenderInfoPutRequest {
	r.body = &body
	return r
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiSenderInfoPutRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiSenderInfoPutRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiSenderInfoPutRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiSenderInfoPutRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

// A store ID for an order&#39;s store platform context
func (r ApiSenderInfoPutRequest) XEVERMILESTOREID(xEVERMILESTOREID string) ApiSenderInfoPutRequest {
	r.xEVERMILESTOREID = &xEVERMILESTOREID
	return r
}

func (r ApiSenderInfoPutRequest) Execute() (*LocationResp, *http.Response, error) {
	return r.ApiService.SenderInfoPutExecute(r)
}

/*
SenderInfoPut Create or update a delivery location

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSenderInfoPutRequest
*/
func (a *LocationsApiService) SenderInfoPut(ctx context.Context) ApiSenderInfoPutRequest {
	return ApiSenderInfoPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LocationResp
func (a *LocationsApiService) SenderInfoPutExecute(r ApiSenderInfoPutRequest) (*LocationResp, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LocationResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocationsApiService.SenderInfoPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sender_info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	if r.xEVERMILESTOREID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-STORE-ID", r.xEVERMILESTOREID, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSenderInfosGetRequest struct {
	ctx context.Context
	ApiService LocationsApi
	type_ *LocationTypeEnum
	xEVERMILEMERCHANTID *string
	xEVERMILETRACEID *string
	xEVERMILESTOREID *string
}

// Whether this action refers to pickup or sender info (pickup/info)
func (r ApiSenderInfosGetRequest) Type_(type_ LocationTypeEnum) ApiSenderInfosGetRequest {
	r.type_ = &type_
	return r
}

// The merchant ID, if using a client credentials token. Will be ignored with a regular user token.
func (r ApiSenderInfosGetRequest) XEVERMILEMERCHANTID(xEVERMILEMERCHANTID string) ApiSenderInfosGetRequest {
	r.xEVERMILEMERCHANTID = &xEVERMILEMERCHANTID
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiSenderInfosGetRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiSenderInfosGetRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

// A store ID for an order&#39;s store platform context
func (r ApiSenderInfosGetRequest) XEVERMILESTOREID(xEVERMILESTOREID string) ApiSenderInfosGetRequest {
	r.xEVERMILESTOREID = &xEVERMILESTOREID
	return r
}

func (r ApiSenderInfosGetRequest) Execute() (*LocationsResponse, *http.Response, error) {
	return r.ApiService.SenderInfosGetExecute(r)
}

/*
SenderInfosGet Get sender and location infos

Get all sender infos or delivery origin locations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSenderInfosGetRequest
*/
func (a *LocationsApiService) SenderInfosGet(ctx context.Context) ApiSenderInfosGetRequest {
	return ApiSenderInfosGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LocationsResponse
func (a *LocationsApiService) SenderInfosGetExecute(r ApiSenderInfosGetRequest) (*LocationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LocationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocationsApiService.SenderInfosGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sender_infos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILEMERCHANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-MERCHANT-ID", r.xEVERMILEMERCHANTID, "")
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	if r.xEVERMILESTOREID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-STORE-ID", r.xEVERMILESTOREID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
