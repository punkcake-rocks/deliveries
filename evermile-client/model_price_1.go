/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
)

// checks if the Price1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Price1{}

// Price1 A price object
type Price1 struct {
	// The item's value in cents/pence. E.G. \"500\" = 5 GBP
	Value int64 `json:"value"`
	Currency string `json:"currency"`
	Discount *Discount `json:"discount,omitempty"`
}

// NewPrice1 instantiates a new Price1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrice1(value int64, currency string) *Price1 {
	this := Price1{}
	this.Value = value
	this.Currency = currency
	return &this
}

// NewPrice1WithDefaults instantiates a new Price1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrice1WithDefaults() *Price1 {
	this := Price1{}
	return &this
}

// GetValue returns the Value field value
func (o *Price1) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Price1) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Price1) SetValue(v int64) {
	o.Value = v
}

// GetCurrency returns the Currency field value
func (o *Price1) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Price1) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Price1) SetCurrency(v string) {
	o.Currency = v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *Price1) GetDiscount() Discount {
	if o == nil || IsNil(o.Discount) {
		var ret Discount
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price1) GetDiscountOk() (*Discount, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *Price1) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given Discount and assigns it to the Discount field.
func (o *Price1) SetDiscount(v Discount) {
	o.Discount = &v
}

func (o Price1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Price1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	toSerialize["currency"] = o.Currency
	if !IsNil(o.Discount) {
		toSerialize["discount"] = o.Discount
	}
	return toSerialize, nil
}

type NullablePrice1 struct {
	value *Price1
	isSet bool
}

func (v NullablePrice1) Get() *Price1 {
	return v.value
}

func (v *NullablePrice1) Set(val *Price1) {
	v.value = val
	v.isSet = true
}

func (v NullablePrice1) IsSet() bool {
	return v.isSet
}

func (v *NullablePrice1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrice1(val *Price1) *NullablePrice1 {
	return &NullablePrice1{value: val, isSet: true}
}

func (v NullablePrice1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrice1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


