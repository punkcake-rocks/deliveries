/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
)

// checks if the GeoLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoLocation{}

// GeoLocation The geographical location (lat/lng)
type GeoLocation struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

// NewGeoLocation instantiates a new GeoLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoLocation(lat float64, lng float64) *GeoLocation {
	this := GeoLocation{}
	this.Lat = lat
	this.Lng = lng
	return &this
}

// NewGeoLocationWithDefaults instantiates a new GeoLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoLocationWithDefaults() *GeoLocation {
	this := GeoLocation{}
	return &this
}

// GetLat returns the Lat field value
func (o *GeoLocation) GetLat() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Lat
}

// GetLatOk returns a tuple with the Lat field value
// and a boolean to check if the value has been set.
func (o *GeoLocation) GetLatOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lat, true
}

// SetLat sets field value
func (o *GeoLocation) SetLat(v float64) {
	o.Lat = v
}

// GetLng returns the Lng field value
func (o *GeoLocation) GetLng() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Lng
}

// GetLngOk returns a tuple with the Lng field value
// and a boolean to check if the value has been set.
func (o *GeoLocation) GetLngOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lng, true
}

// SetLng sets field value
func (o *GeoLocation) SetLng(v float64) {
	o.Lng = v
}

func (o GeoLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lat"] = o.Lat
	toSerialize["lng"] = o.Lng
	return toSerialize, nil
}

type NullableGeoLocation struct {
	value *GeoLocation
	isSet bool
}

func (v NullableGeoLocation) Get() *GeoLocation {
	return v.value
}

func (v *NullableGeoLocation) Set(val *GeoLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoLocation(val *GeoLocation) *NullableGeoLocation {
	return &NullableGeoLocation{value: val, isSet: true}
}

func (v NullableGeoLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


