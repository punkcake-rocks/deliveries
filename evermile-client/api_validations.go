/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type ValidationsApi interface {

	/*
	AddressValidateGet Validate address

	Validate that an address is located in an area served by the Evermile delivery network

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddressValidateGetRequest
	*/
	AddressValidateGet(ctx context.Context) ApiAddressValidateGetRequest

	// AddressValidateGetExecute executes the request
	AddressValidateGetExecute(r ApiAddressValidateGetRequest) (*http.Response, error)

	/*
	EmailValidateGet Validate email

	Validate that an email is valid

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiEmailValidateGetRequest
	*/
	EmailValidateGet(ctx context.Context) ApiEmailValidateGetRequest

	// EmailValidateGetExecute executes the request
	EmailValidateGetExecute(r ApiEmailValidateGetRequest) (*http.Response, error)

	/*
	PhoneValidateGet Validate phone number

	Validate that a phone number is valid

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPhoneValidateGetRequest
	*/
	PhoneValidateGet(ctx context.Context) ApiPhoneValidateGetRequest

	// PhoneValidateGetExecute executes the request
	PhoneValidateGetExecute(r ApiPhoneValidateGetRequest) (*http.Response, error)
}

// ValidationsApiService ValidationsApi service
type ValidationsApiService service

type ApiAddressValidateGetRequest struct {
	ctx context.Context
	ApiService ValidationsApi
	street *string
	city *string
	postcode *string
	country *string
	coordinates *string
	xEVERMILETRACEID *string
}

// The street for delivery
func (r ApiAddressValidateGetRequest) Street(street string) ApiAddressValidateGetRequest {
	r.street = &street
	return r
}

// The city for delivery
func (r ApiAddressValidateGetRequest) City(city string) ApiAddressValidateGetRequest {
	r.city = &city
	return r
}

// The postal code for delivery
func (r ApiAddressValidateGetRequest) Postcode(postcode string) ApiAddressValidateGetRequest {
	r.postcode = &postcode
	return r
}

// 2-letter code for the country for delivery
func (r ApiAddressValidateGetRequest) Country(country string) ApiAddressValidateGetRequest {
	r.country = &country
	return r
}

// The (lat, lng) coordinates. Not required, but will be used if provided.
func (r ApiAddressValidateGetRequest) Coordinates(coordinates string) ApiAddressValidateGetRequest {
	r.coordinates = &coordinates
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiAddressValidateGetRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiAddressValidateGetRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiAddressValidateGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddressValidateGetExecute(r)
}

/*
AddressValidateGet Validate address

Validate that an address is located in an area served by the Evermile delivery network

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddressValidateGetRequest
*/
func (a *ValidationsApiService) AddressValidateGet(ctx context.Context) ApiAddressValidateGetRequest {
	return ApiAddressValidateGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ValidationsApiService) AddressValidateGetExecute(r ApiAddressValidateGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ValidationsApiService.AddressValidateGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/address/validate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.street == nil {
		return nil, reportError("street is required and must be specified")
	}
	if r.city == nil {
		return nil, reportError("city is required and must be specified")
	}
	if r.postcode == nil {
		return nil, reportError("postcode is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "street", r.street, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "city", r.city, "")
	if r.country != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "country", r.country, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "postcode", r.postcode, "")
	if r.coordinates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coordinates", r.coordinates, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InvalidAddressBody
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v InvalidAddressBody
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEmailValidateGetRequest struct {
	ctx context.Context
	ApiService ValidationsApi
	email *string
	xEVERMILETRACEID *string
}

// The email to validate
func (r ApiEmailValidateGetRequest) Email(email string) ApiEmailValidateGetRequest {
	r.email = &email
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiEmailValidateGetRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiEmailValidateGetRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiEmailValidateGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.EmailValidateGetExecute(r)
}

/*
EmailValidateGet Validate email

Validate that an email is valid

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEmailValidateGetRequest
*/
func (a *ValidationsApiService) EmailValidateGet(ctx context.Context) ApiEmailValidateGetRequest {
	return ApiEmailValidateGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ValidationsApiService) EmailValidateGetExecute(r ApiEmailValidateGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ValidationsApiService.EmailValidateGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/email/validate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.email == nil {
		return nil, reportError("email is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPhoneValidateGetRequest struct {
	ctx context.Context
	ApiService ValidationsApi
	phone *string
	xEVERMILETRACEID *string
}

// The phone number to validate
func (r ApiPhoneValidateGetRequest) Phone(phone string) ApiPhoneValidateGetRequest {
	r.phone = &phone
	return r
}

// A trace ID for tracing the request through the Evermile platform
func (r ApiPhoneValidateGetRequest) XEVERMILETRACEID(xEVERMILETRACEID string) ApiPhoneValidateGetRequest {
	r.xEVERMILETRACEID = &xEVERMILETRACEID
	return r
}

func (r ApiPhoneValidateGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.PhoneValidateGetExecute(r)
}

/*
PhoneValidateGet Validate phone number

Validate that a phone number is valid

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPhoneValidateGetRequest
*/
func (a *ValidationsApiService) PhoneValidateGet(ctx context.Context) ApiPhoneValidateGetRequest {
	return ApiPhoneValidateGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ValidationsApiService) PhoneValidateGetExecute(r ApiPhoneValidateGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ValidationsApiService.PhoneValidateGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/phone/validate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.phone == nil {
		return nil, reportError("phone is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "phone", r.phone, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xEVERMILETRACEID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-EVERMILE-TRACE-ID", r.xEVERMILETRACEID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
