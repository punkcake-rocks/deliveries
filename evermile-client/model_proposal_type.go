/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
	"fmt"
)

// ProposalType the model 'ProposalType'
type ProposalType string

// List of proposalType
const (
	PROPOSALTYPE_DELIVER_TOGETHER ProposalType = "deliverTogether"
)

// All allowed values of ProposalType enum
var AllowedProposalTypeEnumValues = []ProposalType{
	"deliverTogether",
}

func (v *ProposalType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProposalType(value)
	for _, existing := range AllowedProposalTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProposalType", value)
}

// NewProposalTypeFromValue returns a pointer to a valid ProposalType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProposalTypeFromValue(v string) (*ProposalType, error) {
	ev := ProposalType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProposalType: valid values are %v", v, AllowedProposalTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProposalType) IsValid() bool {
	for _, existing := range AllowedProposalTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to proposalType value
func (v ProposalType) Ptr() *ProposalType {
	return &v
}

type NullableProposalType struct {
	value *ProposalType
	isSet bool
}

func (v NullableProposalType) Get() *ProposalType {
	return v.value
}

func (v *NullableProposalType) Set(val *ProposalType) {
	v.value = val
	v.isSet = true
}

func (v NullableProposalType) IsSet() bool {
	return v.isSet
}

func (v *NullableProposalType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProposalType(val *ProposalType) *NullableProposalType {
	return &NullableProposalType{value: val, isSet: true}
}

func (v NullableProposalType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProposalType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

