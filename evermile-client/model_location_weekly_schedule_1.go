/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
)

// checks if the LocationWeeklySchedule1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationWeeklySchedule1{}

// LocationWeeklySchedule1 A weekly schedule for a location opening hours
type LocationWeeklySchedule1 struct {
	Monday *LocationTimeWindow `json:"monday,omitempty"`
	Tuesday *LocationTimeWindow `json:"tuesday,omitempty"`
	Wednesday *LocationTimeWindow `json:"wednesday,omitempty"`
	Thursday *LocationTimeWindow `json:"thursday,omitempty"`
	Friday *LocationTimeWindow `json:"friday,omitempty"`
	Saturday *LocationTimeWindow `json:"saturday,omitempty"`
	Sunday *LocationTimeWindow `json:"sunday,omitempty"`
}

// NewLocationWeeklySchedule1 instantiates a new LocationWeeklySchedule1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationWeeklySchedule1() *LocationWeeklySchedule1 {
	this := LocationWeeklySchedule1{}
	return &this
}

// NewLocationWeeklySchedule1WithDefaults instantiates a new LocationWeeklySchedule1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationWeeklySchedule1WithDefaults() *LocationWeeklySchedule1 {
	this := LocationWeeklySchedule1{}
	return &this
}

// GetMonday returns the Monday field value if set, zero value otherwise.
func (o *LocationWeeklySchedule1) GetMonday() LocationTimeWindow {
	if o == nil || IsNil(o.Monday) {
		var ret LocationTimeWindow
		return ret
	}
	return *o.Monday
}

// GetMondayOk returns a tuple with the Monday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationWeeklySchedule1) GetMondayOk() (*LocationTimeWindow, bool) {
	if o == nil || IsNil(o.Monday) {
		return nil, false
	}
	return o.Monday, true
}

// HasMonday returns a boolean if a field has been set.
func (o *LocationWeeklySchedule1) HasMonday() bool {
	if o != nil && !IsNil(o.Monday) {
		return true
	}

	return false
}

// SetMonday gets a reference to the given LocationTimeWindow and assigns it to the Monday field.
func (o *LocationWeeklySchedule1) SetMonday(v LocationTimeWindow) {
	o.Monday = &v
}

// GetTuesday returns the Tuesday field value if set, zero value otherwise.
func (o *LocationWeeklySchedule1) GetTuesday() LocationTimeWindow {
	if o == nil || IsNil(o.Tuesday) {
		var ret LocationTimeWindow
		return ret
	}
	return *o.Tuesday
}

// GetTuesdayOk returns a tuple with the Tuesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationWeeklySchedule1) GetTuesdayOk() (*LocationTimeWindow, bool) {
	if o == nil || IsNil(o.Tuesday) {
		return nil, false
	}
	return o.Tuesday, true
}

// HasTuesday returns a boolean if a field has been set.
func (o *LocationWeeklySchedule1) HasTuesday() bool {
	if o != nil && !IsNil(o.Tuesday) {
		return true
	}

	return false
}

// SetTuesday gets a reference to the given LocationTimeWindow and assigns it to the Tuesday field.
func (o *LocationWeeklySchedule1) SetTuesday(v LocationTimeWindow) {
	o.Tuesday = &v
}

// GetWednesday returns the Wednesday field value if set, zero value otherwise.
func (o *LocationWeeklySchedule1) GetWednesday() LocationTimeWindow {
	if o == nil || IsNil(o.Wednesday) {
		var ret LocationTimeWindow
		return ret
	}
	return *o.Wednesday
}

// GetWednesdayOk returns a tuple with the Wednesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationWeeklySchedule1) GetWednesdayOk() (*LocationTimeWindow, bool) {
	if o == nil || IsNil(o.Wednesday) {
		return nil, false
	}
	return o.Wednesday, true
}

// HasWednesday returns a boolean if a field has been set.
func (o *LocationWeeklySchedule1) HasWednesday() bool {
	if o != nil && !IsNil(o.Wednesday) {
		return true
	}

	return false
}

// SetWednesday gets a reference to the given LocationTimeWindow and assigns it to the Wednesday field.
func (o *LocationWeeklySchedule1) SetWednesday(v LocationTimeWindow) {
	o.Wednesday = &v
}

// GetThursday returns the Thursday field value if set, zero value otherwise.
func (o *LocationWeeklySchedule1) GetThursday() LocationTimeWindow {
	if o == nil || IsNil(o.Thursday) {
		var ret LocationTimeWindow
		return ret
	}
	return *o.Thursday
}

// GetThursdayOk returns a tuple with the Thursday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationWeeklySchedule1) GetThursdayOk() (*LocationTimeWindow, bool) {
	if o == nil || IsNil(o.Thursday) {
		return nil, false
	}
	return o.Thursday, true
}

// HasThursday returns a boolean if a field has been set.
func (o *LocationWeeklySchedule1) HasThursday() bool {
	if o != nil && !IsNil(o.Thursday) {
		return true
	}

	return false
}

// SetThursday gets a reference to the given LocationTimeWindow and assigns it to the Thursday field.
func (o *LocationWeeklySchedule1) SetThursday(v LocationTimeWindow) {
	o.Thursday = &v
}

// GetFriday returns the Friday field value if set, zero value otherwise.
func (o *LocationWeeklySchedule1) GetFriday() LocationTimeWindow {
	if o == nil || IsNil(o.Friday) {
		var ret LocationTimeWindow
		return ret
	}
	return *o.Friday
}

// GetFridayOk returns a tuple with the Friday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationWeeklySchedule1) GetFridayOk() (*LocationTimeWindow, bool) {
	if o == nil || IsNil(o.Friday) {
		return nil, false
	}
	return o.Friday, true
}

// HasFriday returns a boolean if a field has been set.
func (o *LocationWeeklySchedule1) HasFriday() bool {
	if o != nil && !IsNil(o.Friday) {
		return true
	}

	return false
}

// SetFriday gets a reference to the given LocationTimeWindow and assigns it to the Friday field.
func (o *LocationWeeklySchedule1) SetFriday(v LocationTimeWindow) {
	o.Friday = &v
}

// GetSaturday returns the Saturday field value if set, zero value otherwise.
func (o *LocationWeeklySchedule1) GetSaturday() LocationTimeWindow {
	if o == nil || IsNil(o.Saturday) {
		var ret LocationTimeWindow
		return ret
	}
	return *o.Saturday
}

// GetSaturdayOk returns a tuple with the Saturday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationWeeklySchedule1) GetSaturdayOk() (*LocationTimeWindow, bool) {
	if o == nil || IsNil(o.Saturday) {
		return nil, false
	}
	return o.Saturday, true
}

// HasSaturday returns a boolean if a field has been set.
func (o *LocationWeeklySchedule1) HasSaturday() bool {
	if o != nil && !IsNil(o.Saturday) {
		return true
	}

	return false
}

// SetSaturday gets a reference to the given LocationTimeWindow and assigns it to the Saturday field.
func (o *LocationWeeklySchedule1) SetSaturday(v LocationTimeWindow) {
	o.Saturday = &v
}

// GetSunday returns the Sunday field value if set, zero value otherwise.
func (o *LocationWeeklySchedule1) GetSunday() LocationTimeWindow {
	if o == nil || IsNil(o.Sunday) {
		var ret LocationTimeWindow
		return ret
	}
	return *o.Sunday
}

// GetSundayOk returns a tuple with the Sunday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationWeeklySchedule1) GetSundayOk() (*LocationTimeWindow, bool) {
	if o == nil || IsNil(o.Sunday) {
		return nil, false
	}
	return o.Sunday, true
}

// HasSunday returns a boolean if a field has been set.
func (o *LocationWeeklySchedule1) HasSunday() bool {
	if o != nil && !IsNil(o.Sunday) {
		return true
	}

	return false
}

// SetSunday gets a reference to the given LocationTimeWindow and assigns it to the Sunday field.
func (o *LocationWeeklySchedule1) SetSunday(v LocationTimeWindow) {
	o.Sunday = &v
}

func (o LocationWeeklySchedule1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationWeeklySchedule1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Monday) {
		toSerialize["monday"] = o.Monday
	}
	if !IsNil(o.Tuesday) {
		toSerialize["tuesday"] = o.Tuesday
	}
	if !IsNil(o.Wednesday) {
		toSerialize["wednesday"] = o.Wednesday
	}
	if !IsNil(o.Thursday) {
		toSerialize["thursday"] = o.Thursday
	}
	if !IsNil(o.Friday) {
		toSerialize["friday"] = o.Friday
	}
	if !IsNil(o.Saturday) {
		toSerialize["saturday"] = o.Saturday
	}
	if !IsNil(o.Sunday) {
		toSerialize["sunday"] = o.Sunday
	}
	return toSerialize, nil
}

type NullableLocationWeeklySchedule1 struct {
	value *LocationWeeklySchedule1
	isSet bool
}

func (v NullableLocationWeeklySchedule1) Get() *LocationWeeklySchedule1 {
	return v.value
}

func (v *NullableLocationWeeklySchedule1) Set(val *LocationWeeklySchedule1) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationWeeklySchedule1) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationWeeklySchedule1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationWeeklySchedule1(val *LocationWeeklySchedule1) *NullableLocationWeeklySchedule1 {
	return &NullableLocationWeeklySchedule1{value: val, isSet: true}
}

func (v NullableLocationWeeklySchedule1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationWeeklySchedule1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


