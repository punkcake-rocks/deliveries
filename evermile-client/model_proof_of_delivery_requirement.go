/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
	"fmt"
)

// ProofOfDeliveryRequirement An optional requirement for proof of delivery.<br> <b>NOTE:</b>Requiring a proof of delivery may limit optimization options and result in more expensive delivery quotes.<br> Will default to <b>none</b> if this parameter is not set. <table> <tr><td>signature</td>   <td>An electronic signature is required</td></tr> <tr><td>parcelPhoto</td> <td>A digital photo of the delivered parcel is required</td></tr> <tr><td>photoId</td>     <td>A digital photo of the recipient's photo ID is required</td></tr> <tr><td>any</td>         <td>Any proof of delivery is acceptable, but required</td></tr> <tr><td>none</td>        <td>No proof of delivery is required</td></tr> </table> 
type ProofOfDeliveryRequirement string

// List of proofOfDeliveryRequirement
const (
	PROOFOFDELIVERYREQUIREMENT_SIGNATURE ProofOfDeliveryRequirement = "signature"
	PROOFOFDELIVERYREQUIREMENT_PARCEL_PHOTO ProofOfDeliveryRequirement = "parcelPhoto"
	PROOFOFDELIVERYREQUIREMENT_PHOTO_ID ProofOfDeliveryRequirement = "photoId"
	PROOFOFDELIVERYREQUIREMENT_ANY ProofOfDeliveryRequirement = "any"
	PROOFOFDELIVERYREQUIREMENT_NONE ProofOfDeliveryRequirement = "none"
)

// All allowed values of ProofOfDeliveryRequirement enum
var AllowedProofOfDeliveryRequirementEnumValues = []ProofOfDeliveryRequirement{
	"signature",
	"parcelPhoto",
	"photoId",
	"any",
	"none",
}

func (v *ProofOfDeliveryRequirement) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProofOfDeliveryRequirement(value)
	for _, existing := range AllowedProofOfDeliveryRequirementEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProofOfDeliveryRequirement", value)
}

// NewProofOfDeliveryRequirementFromValue returns a pointer to a valid ProofOfDeliveryRequirement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProofOfDeliveryRequirementFromValue(v string) (*ProofOfDeliveryRequirement, error) {
	ev := ProofOfDeliveryRequirement(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProofOfDeliveryRequirement: valid values are %v", v, AllowedProofOfDeliveryRequirementEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProofOfDeliveryRequirement) IsValid() bool {
	for _, existing := range AllowedProofOfDeliveryRequirementEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to proofOfDeliveryRequirement value
func (v ProofOfDeliveryRequirement) Ptr() *ProofOfDeliveryRequirement {
	return &v
}

type NullableProofOfDeliveryRequirement struct {
	value *ProofOfDeliveryRequirement
	isSet bool
}

func (v NullableProofOfDeliveryRequirement) Get() *ProofOfDeliveryRequirement {
	return v.value
}

func (v *NullableProofOfDeliveryRequirement) Set(val *ProofOfDeliveryRequirement) {
	v.value = val
	v.isSet = true
}

func (v NullableProofOfDeliveryRequirement) IsSet() bool {
	return v.isSet
}

func (v *NullableProofOfDeliveryRequirement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProofOfDeliveryRequirement(val *ProofOfDeliveryRequirement) *NullableProofOfDeliveryRequirement {
	return &NullableProofOfDeliveryRequirement{value: val, isSet: true}
}

func (v NullableProofOfDeliveryRequirement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProofOfDeliveryRequirement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

