/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
)

// checks if the HandoffInfo1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandoffInfo1{}

// HandoffInfo1 Information about the handoff
type HandoffInfo1 struct {
	ContactInfo HandoffContactInfo1 `json:"contactInfo"`
	HandoffTime OptionalTimeWindow `json:"handoffTime"`
	// walking distance in meters
	WalkingDistanceMeters int64 `json:"walkingDistanceMeters"`
}

// NewHandoffInfo1 instantiates a new HandoffInfo1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandoffInfo1(contactInfo HandoffContactInfo1, handoffTime OptionalTimeWindow, walkingDistanceMeters int64) *HandoffInfo1 {
	this := HandoffInfo1{}
	this.ContactInfo = contactInfo
	this.HandoffTime = handoffTime
	this.WalkingDistanceMeters = walkingDistanceMeters
	return &this
}

// NewHandoffInfo1WithDefaults instantiates a new HandoffInfo1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandoffInfo1WithDefaults() *HandoffInfo1 {
	this := HandoffInfo1{}
	return &this
}

// GetContactInfo returns the ContactInfo field value
func (o *HandoffInfo1) GetContactInfo() HandoffContactInfo1 {
	if o == nil {
		var ret HandoffContactInfo1
		return ret
	}

	return o.ContactInfo
}

// GetContactInfoOk returns a tuple with the ContactInfo field value
// and a boolean to check if the value has been set.
func (o *HandoffInfo1) GetContactInfoOk() (*HandoffContactInfo1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContactInfo, true
}

// SetContactInfo sets field value
func (o *HandoffInfo1) SetContactInfo(v HandoffContactInfo1) {
	o.ContactInfo = v
}

// GetHandoffTime returns the HandoffTime field value
func (o *HandoffInfo1) GetHandoffTime() OptionalTimeWindow {
	if o == nil {
		var ret OptionalTimeWindow
		return ret
	}

	return o.HandoffTime
}

// GetHandoffTimeOk returns a tuple with the HandoffTime field value
// and a boolean to check if the value has been set.
func (o *HandoffInfo1) GetHandoffTimeOk() (*OptionalTimeWindow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HandoffTime, true
}

// SetHandoffTime sets field value
func (o *HandoffInfo1) SetHandoffTime(v OptionalTimeWindow) {
	o.HandoffTime = v
}

// GetWalkingDistanceMeters returns the WalkingDistanceMeters field value
func (o *HandoffInfo1) GetWalkingDistanceMeters() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.WalkingDistanceMeters
}

// GetWalkingDistanceMetersOk returns a tuple with the WalkingDistanceMeters field value
// and a boolean to check if the value has been set.
func (o *HandoffInfo1) GetWalkingDistanceMetersOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalkingDistanceMeters, true
}

// SetWalkingDistanceMeters sets field value
func (o *HandoffInfo1) SetWalkingDistanceMeters(v int64) {
	o.WalkingDistanceMeters = v
}

func (o HandoffInfo1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandoffInfo1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contactInfo"] = o.ContactInfo
	toSerialize["handoffTime"] = o.HandoffTime
	toSerialize["walkingDistanceMeters"] = o.WalkingDistanceMeters
	return toSerialize, nil
}

type NullableHandoffInfo1 struct {
	value *HandoffInfo1
	isSet bool
}

func (v NullableHandoffInfo1) Get() *HandoffInfo1 {
	return v.value
}

func (v *NullableHandoffInfo1) Set(val *HandoffInfo1) {
	v.value = val
	v.isSet = true
}

func (v NullableHandoffInfo1) IsSet() bool {
	return v.isSet
}

func (v *NullableHandoffInfo1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandoffInfo1(val *HandoffInfo1) *NullableHandoffInfo1 {
	return &NullableHandoffInfo1{value: val, isSet: true}
}

func (v NullableHandoffInfo1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandoffInfo1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


