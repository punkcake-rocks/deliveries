/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
	"fmt"
)

// CarriersType the model 'CarriersType'
type CarriersType string

// List of carriersType
const (
	CARRIERSTYPE_STUART CarriersType = "Stuart"
	CARRIERSTYPE_GOPHR CarriersType = "Gophr"
	CARRIERSTYPE_PACKFLEET CarriersType = "Packfleet"
	CARRIERSTYPE_PEDIVAN CarriersType = "Pedivan"
	CARRIERSTYPE_PEDIVAN_FBX CarriersType = "PedivanFBX"
	CARRIERSTYPE_BRISQQ CarriersType = "Brisqq"
	CARRIERSTYPE_FINMILE CarriersType = "Finmile"
	CARRIERSTYPE_UBER CarriersType = "Uber"
	CARRIERSTYPE_EVERMILE_MANUAL CarriersType = "EvermileManual"
)

// All allowed values of CarriersType enum
var AllowedCarriersTypeEnumValues = []CarriersType{
	"Stuart",
	"Gophr",
	"Packfleet",
	"Pedivan",
	"PedivanFBX",
	"Brisqq",
	"Finmile",
	"Uber",
	"EvermileManual",
}

func (v *CarriersType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CarriersType(value)
	for _, existing := range AllowedCarriersTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CarriersType", value)
}

// NewCarriersTypeFromValue returns a pointer to a valid CarriersType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCarriersTypeFromValue(v string) (*CarriersType, error) {
	ev := CarriersType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CarriersType: valid values are %v", v, AllowedCarriersTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CarriersType) IsValid() bool {
	for _, existing := range AllowedCarriersTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to carriersType value
func (v CarriersType) Ptr() *CarriersType {
	return &v
}

type NullableCarriersType struct {
	value *CarriersType
	isSet bool
}

func (v NullableCarriersType) Get() *CarriersType {
	return v.value
}

func (v *NullableCarriersType) Set(val *CarriersType) {
	v.value = val
	v.isSet = true
}

func (v NullableCarriersType) IsSet() bool {
	return v.isSet
}

func (v *NullableCarriersType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCarriersType(val *CarriersType) *NullableCarriersType {
	return &NullableCarriersType{value: val, isSet: true}
}

func (v NullableCarriersType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCarriersType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

