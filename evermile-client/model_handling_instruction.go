/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
	"fmt"
)

// HandlingInstruction <u>Handling instructions for an item</u>: <br>             <table>   <tr><td>alcohol</td>                <td>Parcel contains alcohol</td></tr>   <tr><td>cake</td>                   <td>Parcel contains a cake</td></tr>   <tr><td>flowers</td>                <td>Parcel contains flowers</td></tr>   <tr><td>fluids</td>                 <td>Parcel contains fluids (e.g. drinks)</td></tr>   <tr><td>fragile</td>                <td>Parcel contains fragile items</td></tr>   <tr><td>hot</td>                    <td>Parcel Contents are hot (e.g. food)</td></tr>   <tr><td>perishable</td>             <td>Parcel contains perishable items</td></tr>   <tr><td>prescriptionDrugs</td>      <td>Parcel contains prescription drugs</td></tr>   <tr><td>requiresRefrigeration</td>  <td>Parcel requires refrigeration</td></tr>   <tr><td>rightSideUp</td>            <td>Parcel must be kept right-side-up (do not flip)</td></tr>   <tr><td>temperatureControlled</td>  <td>Parcel has a temperature control device</td></tr> </table> 
type HandlingInstruction string

// List of handlingInstruction
const (
	HANDLINGINSTRUCTION_ALCOHOL HandlingInstruction = "alcohol"
	HANDLINGINSTRUCTION_CAKE HandlingInstruction = "cake"
	HANDLINGINSTRUCTION_FLOWERS HandlingInstruction = "flowers"
	HANDLINGINSTRUCTION_FLUIDS HandlingInstruction = "fluids"
	HANDLINGINSTRUCTION_FRAGILE HandlingInstruction = "fragile"
	HANDLINGINSTRUCTION_HOT HandlingInstruction = "hot"
	HANDLINGINSTRUCTION_PERISHABLE HandlingInstruction = "perishable"
	HANDLINGINSTRUCTION_PRESCRIPTION_DRUGS HandlingInstruction = "prescriptionDrugs"
	HANDLINGINSTRUCTION_REQUIRES_REFRIGERATION HandlingInstruction = "requiresRefrigeration"
	HANDLINGINSTRUCTION_RIGHT_SIDE_UP HandlingInstruction = "rightSideUp"
	HANDLINGINSTRUCTION_TEMPERATURE_CONTROLLED HandlingInstruction = "temperatureControlled"
)

// All allowed values of HandlingInstruction enum
var AllowedHandlingInstructionEnumValues = []HandlingInstruction{
	"alcohol",
	"cake",
	"flowers",
	"fluids",
	"fragile",
	"hot",
	"perishable",
	"prescriptionDrugs",
	"requiresRefrigeration",
	"rightSideUp",
	"temperatureControlled",
}

func (v *HandlingInstruction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HandlingInstruction(value)
	for _, existing := range AllowedHandlingInstructionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HandlingInstruction", value)
}

// NewHandlingInstructionFromValue returns a pointer to a valid HandlingInstruction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHandlingInstructionFromValue(v string) (*HandlingInstruction, error) {
	ev := HandlingInstruction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HandlingInstruction: valid values are %v", v, AllowedHandlingInstructionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HandlingInstruction) IsValid() bool {
	for _, existing := range AllowedHandlingInstructionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to handlingInstruction value
func (v HandlingInstruction) Ptr() *HandlingInstruction {
	return &v
}

type NullableHandlingInstruction struct {
	value *HandlingInstruction
	isSet bool
}

func (v NullableHandlingInstruction) Get() *HandlingInstruction {
	return v.value
}

func (v *NullableHandlingInstruction) Set(val *HandlingInstruction) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlingInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlingInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlingInstruction(val *HandlingInstruction) *NullableHandlingInstruction {
	return &NullableHandlingInstruction{value: val, isSet: true}
}

func (v NullableHandlingInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlingInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

