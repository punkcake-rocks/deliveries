/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
	"fmt"
)

// OrderStatus <u>The status of an order</u>: <br>             <table>   <tr><td>Pending</td>            <td>Order is new, prior to processing</td></tr>   <tr><td>Packing</td>            <td>Order is being picked and packed</td></tr>   <tr><td>Ready</td>              <td>Order is ready for collection by courier</td></tr>   <tr><td>Collected</td>          <td>Order was collected</td></tr>   <tr><td>Delivered</td>          <td>Order was delivered <I>(final status)</I></td></tr>   <tr><td>Cancelled</td>          <td>Order was cancelled <I>(final status)</I></td></tr>   <tr><td>CannotFulfill</td>      <td>Order has issues that need handling <I>(final status)</I></td></tr>   <tr><td>MissingDetails</td>     <td>Order is missing required details</td></tr>   <tr><td>InvalidAddress</td>     <td>Order has an invalid address</td></tr>   <tr><td>Failed</td>             <td>Order delivery failed</td></tr>   <tr><td>PackageMissing</td>     <td>Courier reported a package has gone missing</td></tr>   <tr><td>NeverArrived</td>       <td>A delivered package was reported as never arrived</td></tr>   <tr><td>WrongItem</td>          <td>A wrong item was deliverred</td></tr>   <tr><td>DamagedItem</td>        <td>A damaged item was delivered</td></tr>   <tr><td>MissingItem</td>        <td>An item was missing from the delivery</td></tr>   <tr><td>ReturningToSender</td>  <td>Delivery failed, item is being returned to sender</td></tr>   <tr><td>ReturnedToSender</td>   <td>Item has been returned to sender <I>(final status)</I></td></tr>   <tr><td>ReadyForHandoff</td>    <td>Order is ready for handoff </td></tr>   <tr><td>WaitingForHandoff</td>   <td></I>Order is waiting to be received</td></tr> </table> 
type OrderStatus string

// List of orderStatus
const (
	ORDERSTATUS_PENDING OrderStatus = "Pending"
	ORDERSTATUS_PACKING OrderStatus = "Packing"
	ORDERSTATUS_READY OrderStatus = "Ready"
	ORDERSTATUS_COLLECTED OrderStatus = "Collected"
	ORDERSTATUS_ON_WAY_TO_DROPOFF OrderStatus = "OnWayToDropoff"
	ORDERSTATUS_IN_TRANSIT OrderStatus = "InTransit"
	ORDERSTATUS_WAITING_IN_HUB OrderStatus = "WaitingInHub"
	ORDERSTATUS_DELIVERED OrderStatus = "Delivered"
	ORDERSTATUS_CANCELLED OrderStatus = "Cancelled"
	ORDERSTATUS_CANNOT_FULFILL OrderStatus = "CannotFulfill"
	ORDERSTATUS_MISSING_DETAILS OrderStatus = "MissingDetails"
	ORDERSTATUS_INVALID_ADDRESS OrderStatus = "InvalidAddress"
	ORDERSTATUS_FAILED OrderStatus = "Failed"
	ORDERSTATUS_PACKAGE_MISSING OrderStatus = "PackageMissing"
	ORDERSTATUS_NEVER_ARRIVED OrderStatus = "NeverArrived"
	ORDERSTATUS_WRONG_ITEM OrderStatus = "WrongItem"
	ORDERSTATUS_DAMAGED_ITEM OrderStatus = "DamagedItem"
	ORDERSTATUS_MISSING_ITEM OrderStatus = "MissingItem"
	ORDERSTATUS_RETURNING_TO_SENDER OrderStatus = "ReturningToSender"
	ORDERSTATUS_RETURNED_TO_SENDER OrderStatus = "ReturnedToSender"
	ORDERSTATUS_READY_FOR_HANDOFF OrderStatus = "ReadyForHandoff"
	ORDERSTATUS_WAITING_FOR_HANDOFF OrderStatus = "WaitingForHandoff"
)

// All allowed values of OrderStatus enum
var AllowedOrderStatusEnumValues = []OrderStatus{
	"Pending",
	"Packing",
	"Ready",
	"Collected",
	"OnWayToDropoff",
	"InTransit",
	"WaitingInHub",
	"Delivered",
	"Cancelled",
	"CannotFulfill",
	"MissingDetails",
	"InvalidAddress",
	"Failed",
	"PackageMissing",
	"NeverArrived",
	"WrongItem",
	"DamagedItem",
	"MissingItem",
	"ReturningToSender",
	"ReturnedToSender",
	"ReadyForHandoff",
	"WaitingForHandoff",
}

func (v *OrderStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderStatus(value)
	for _, existing := range AllowedOrderStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderStatus", value)
}

// NewOrderStatusFromValue returns a pointer to a valid OrderStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderStatusFromValue(v string) (*OrderStatus, error) {
	ev := OrderStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderStatus: valid values are %v", v, AllowedOrderStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderStatus) IsValid() bool {
	for _, existing := range AllowedOrderStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to orderStatus value
func (v OrderStatus) Ptr() *OrderStatus {
	return &v
}

type NullableOrderStatus struct {
	value *OrderStatus
	isSet bool
}

func (v NullableOrderStatus) Get() *OrderStatus {
	return v.value
}

func (v *NullableOrderStatus) Set(val *OrderStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderStatus(val *OrderStatus) *NullableOrderStatus {
	return &NullableOrderStatus{value: val, isSet: true}
}

func (v NullableOrderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

