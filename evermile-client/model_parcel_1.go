/*
Evermile Commercial Quotes and Booking API

This is Evermile's commercial API for handling delivery quotes and orders

API version: 1.0
Contact: support@evermile.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package EvermileClient

import (
	"encoding/json"
)

// checks if the Parcel1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Parcel1{}

// Parcel1 Data about the parcel
type Parcel1 struct {
	// The id of the parcel object in evermile db
	Id *string `json:"id,omitempty"`
	Dimensions Dimensions `json:"dimensions"`
	// Weight of the package in Kilograms
	WeightKg float32 `json:"weightKg"`
	ParcelType ParcelType `json:"parcelType"`
	ItemsList []Item1 `json:"itemsList,omitempty"`
}

// NewParcel1 instantiates a new Parcel1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParcel1(dimensions Dimensions, weightKg float32, parcelType ParcelType) *Parcel1 {
	this := Parcel1{}
	this.Dimensions = dimensions
	this.WeightKg = weightKg
	this.ParcelType = parcelType
	return &this
}

// NewParcel1WithDefaults instantiates a new Parcel1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParcel1WithDefaults() *Parcel1 {
	this := Parcel1{}
	var parcelType ParcelType = PARCELTYPE_PACKAGE
	this.ParcelType = parcelType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Parcel1) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parcel1) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Parcel1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Parcel1) SetId(v string) {
	o.Id = &v
}

// GetDimensions returns the Dimensions field value
func (o *Parcel1) GetDimensions() Dimensions {
	if o == nil {
		var ret Dimensions
		return ret
	}

	return o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value
// and a boolean to check if the value has been set.
func (o *Parcel1) GetDimensionsOk() (*Dimensions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dimensions, true
}

// SetDimensions sets field value
func (o *Parcel1) SetDimensions(v Dimensions) {
	o.Dimensions = v
}

// GetWeightKg returns the WeightKg field value
func (o *Parcel1) GetWeightKg() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WeightKg
}

// GetWeightKgOk returns a tuple with the WeightKg field value
// and a boolean to check if the value has been set.
func (o *Parcel1) GetWeightKgOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WeightKg, true
}

// SetWeightKg sets field value
func (o *Parcel1) SetWeightKg(v float32) {
	o.WeightKg = v
}

// GetParcelType returns the ParcelType field value
func (o *Parcel1) GetParcelType() ParcelType {
	if o == nil {
		var ret ParcelType
		return ret
	}

	return o.ParcelType
}

// GetParcelTypeOk returns a tuple with the ParcelType field value
// and a boolean to check if the value has been set.
func (o *Parcel1) GetParcelTypeOk() (*ParcelType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParcelType, true
}

// SetParcelType sets field value
func (o *Parcel1) SetParcelType(v ParcelType) {
	o.ParcelType = v
}

// GetItemsList returns the ItemsList field value if set, zero value otherwise.
func (o *Parcel1) GetItemsList() []Item1 {
	if o == nil || IsNil(o.ItemsList) {
		var ret []Item1
		return ret
	}
	return o.ItemsList
}

// GetItemsListOk returns a tuple with the ItemsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parcel1) GetItemsListOk() ([]Item1, bool) {
	if o == nil || IsNil(o.ItemsList) {
		return nil, false
	}
	return o.ItemsList, true
}

// HasItemsList returns a boolean if a field has been set.
func (o *Parcel1) HasItemsList() bool {
	if o != nil && !IsNil(o.ItemsList) {
		return true
	}

	return false
}

// SetItemsList gets a reference to the given []Item1 and assigns it to the ItemsList field.
func (o *Parcel1) SetItemsList(v []Item1) {
	o.ItemsList = v
}

func (o Parcel1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Parcel1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["dimensions"] = o.Dimensions
	toSerialize["weightKg"] = o.WeightKg
	toSerialize["parcelType"] = o.ParcelType
	if !IsNil(o.ItemsList) {
		toSerialize["itemsList"] = o.ItemsList
	}
	return toSerialize, nil
}

type NullableParcel1 struct {
	value *Parcel1
	isSet bool
}

func (v NullableParcel1) Get() *Parcel1 {
	return v.value
}

func (v *NullableParcel1) Set(val *Parcel1) {
	v.value = val
	v.isSet = true
}

func (v NullableParcel1) IsSet() bool {
	return v.isSet
}

func (v *NullableParcel1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParcel1(val *Parcel1) *NullableParcel1 {
	return &NullableParcel1{value: val, isSet: true}
}

func (v NullableParcel1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParcel1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


